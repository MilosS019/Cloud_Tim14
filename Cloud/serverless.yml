service: cloud-project
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.7
  profile: Martic
  stage: dev
  region: eu-central-1
  memorySize: 128
  timeout: 10
  environment:
    USER_TABLE: !Ref userTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [userTable, Arn]

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [FilePermissionsTable, Arn]

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [DynamoDbMetaData, Arn]

    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:DeleteObject
      Resource:
        - "arn:aws:s3:::tim7-project-files-bucket"
        - "arn:aws:s3:::tim7-project-files-bucket/*"

# Packaging global configuration
package:
  # Create separate zip for each Lambda function
  individually: true
  patterns:
    # Exclude everything (each Lambda will specify which directory should be included)
    # To exclude use '!' prefix
    - "!**/**"
    # Include utility directory for every Lambda function
    - "utility/**"

functions:
  saveUser:
    handler: saveUser/save_user.save
    package:
      # Include 'registerUser' directory and all child directories
      include: "saveUser/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: users
          # HTTP method for this endpoint
          method: post
          # Enable CORS. Don't forget to return the right header in your response
          cors: true

  getUsers:
    handler: getUsers/get_users.get_all_users
    package:
      # Include 'registerUser' directory and all child directories
      include: "getUsers/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: users
          # HTTP method for this endpoint
          method: get
          # Enable CORS. Don't forget to return the right header in your response
          cors: true

  getFolders:
    handler: getFolders/get_folders.get_all_folders
    package:
      # Include 'registerUser' directory and all child directories
      include: "getFolders/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: folders
          # HTTP method for this endpoint
          method: get
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  getFiles:
    handler: getFiles/get_files.get_files
    package:
      # Include 'registerUser' directory and all child directories
      include: "getFiles/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: files
          # HTTP method for this endpoint
          method: put
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  downloadFiles:
    handler: fileDownload/download_file.download_file
    package:
      # Include 'registerUser' directory and all child directories
      include: "fileDownload/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: download
          # HTTP method for this endpoint
          method: put
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  getMetaData:
    handler: getMetaData/get_metadata.get_metadata
    package:
      # Include 'registerUser' directory and all child directories
      include: "getMetaData/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: metadata
          # HTTP method for this endpoint
          method: put
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  uploadMetaData:
    handler: metaDataUpload/upload_meta_data.upload_file
    package:
      # Include 'registerUser' directory and all child directories
      include: "metaDataUpload/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: upload-metadata
          # HTTP method for this endpoint
          method: post
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  uploadFile:
    handler: fileUpload/upload_file.upload_file
    package:
      # Include 'registerUser' directory and all child directories
      include: "fileUpload/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: upload-file
          # HTTP method for this endpoint
          method: post
          # Enable CORS. Don't forget to return the right header in your response
          cors: true

          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  
  uploadFolder:
    handler: uploadFolder/upload_folder.upload_folder
    package:
      # Include 'registerUser' directory and all child directories
      include: "uploadFolder/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: upload-folder
          # HTTP method for this endpoint
          method: post
          # Enable CORS. Don't forget to return the right header in your response
          cors: true

          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  addPermission:
    handler: addViewPermission/add_view_permission.add_permission
    package:
      include: "addViewPermission/**"
    events:
      - http:
          path: file-permission
          method: post
          cors: true

          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  renameFolder:
    handler: renameFolder/rename_folder.rename_folder
    package:
      # Include 'registerUser' directory and all child directories
      include: "renameFolder/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: rename-folder
          # HTTP method for this endpoint
          method: post
          # Enable CORS. Don't forget to return the right header in your response
          cors: true

          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  removePermission:
    handler: removeViewPermission/remove_view_permission.remove_permission
    package:
      include: "removeViewPermission/**"
    events:
      - http:
          path: file-permission
          method: delete
          cors: true

          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }


resources:
  Resources:
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: userTable
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    FilePermissionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: file-permissions
        AttributeDefinitions:
          - AttributeName: granted_user
            AttributeType: S
          - AttributeName: file_path
            AttributeType: S
        KeySchema:
          - AttributeName: granted_user
            KeyType: HASH
          - AttributeName: file_path
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    DynamoDbMetaData:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: meta-data
        AttributeDefinitions:
          - AttributeName: emailAndName
            AttributeType: S

        KeySchema:
          - AttributeName: emailAndName
            KeyType: HASH

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    S3BucketForFiles:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: tim7-project-files-bucket
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              AllowedOrigins:
                - "*"

    MyUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: my-user-poll
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: OFF
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        UserPoolTags:
          TagKey: TagValue
    MyUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref MyUserPool
        ClientName: my-user-poll
        GenerateSecret: false

    MyApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 10
        IdentitySource: method.request.header.Authorization
        Name: MyCognitoAuthorizer
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - {
              "Fn::Join":
                [
                  "",
                  [
                    "arn:aws:cognito-idp:",
                    { Ref: "AWS::Region" },
                    ":",
                    { Ref: "AWS::AccountId" },
                    ":userpool/",
                    Ref: MyUserPool,
                  ],
                ],
            }
