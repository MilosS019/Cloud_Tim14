service: cloud-project
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.7
  profile: Martic
  stage: dev
  region: eu-central-1
  memorySize: 128
  timeout: 10
  environment:
    USER_TABLE: !Ref userTable
  iamRoleStatements:
    # Dodajemo dozvole za pristup SES-u
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"

    - Effect: Allow
      Action:
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminUpdateUserAttributes
        - cognito-idp:AdminSetUserPassword
      Resource: "*"

    - Effect: Allow
      Action:
        - ses:VerifyEmailIdentity
      Resource: "*"

    - Effect: "Allow"
      Action:
        - ses:ListVerifiedEmailAddresses
      Resource: "*"

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [userTable, Arn]

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [FilePermissionsTable, Arn]

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [DynamoDbMetaData, Arn]

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [registrationRequestTable2, Arn]

    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:PurgeQueue
        - sqs:CreateQueue
        - sqs:DeleteQueue
        - sqs:GetQueueUrl
      Resource:
        - "Fn::GetAtt": [notificationQueue, Arn]

    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:DeleteObject
      Resource:
        - "arn:aws:s3:::tim7-project-files-bucket"
        - "arn:aws:s3:::tim7-project-files-bucket/*"

# Packaging global configuration
package:
  # Create separate zip for each Lambda function
  individually: true
  patterns:
    # Exclude everything (each Lambda will specify which directory should be included)
    # To exclude use '!' prefix
    - "!**/**"
    # Include utility directory for every Lambda function
    - "utility/**"

functions:
  saveUser:
    handler: saveUser/save_user.save
    package:
      # Include 'registerUser' directory and all child directories
      include: "saveUser/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: save/users
          # HTTP method for this endpoint
          method: post
          # Enable CORS. Don't forget to return the right header in your response
          cors: true

  getUsers:
    handler: getUsers/get_users.get_all_users
    package:
      # Include 'registerUser' directory and all child directories
      include: "getUsers/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: users
          # HTTP method for this endpoint
          method: get
          # Enable CORS. Don't forget to return the right header in your response
          cors: true

  getFolders:
    handler: getFolders/get_folders.get_all_folders
    package:
      # Include 'registerUser' directory and all child directories
      include: "getFolders/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: folders
          # HTTP method for this endpoint
          method: get
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  getFiles:
    handler: getFiles/get_files.get_files
    package:
      # Include 'registerUser' directory and all child directories
      include: "getFiles/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: files
          # HTTP method for this endpoint
          method: put
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  getAllFiles:
    handler: getAllFiles/get_all_files.get_all_files
    package:
      # Include 'registerUser' directory and all child directories
      include: "getAllFiles/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: all-files
          # HTTP method for this endpoint
          method: put
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  downloadFiles:
    handler: fileDownload/download_file.download_file
    package:
      # Include 'registerUser' directory and all child directories
      include: "fileDownload/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: download
          # HTTP method for this endpoint
          method: put
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  getMetaData:
    handler: getMetaData/get_metadata.get_metadata
    package:
      # Include 'registerUser' directory and all child directories
      include: "getMetaData/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: metadata
          # HTTP method for this endpoint
          method: put
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  downloadShared:
    handler: downloadShared/download_shared.download_shared
    package:
      # Include 'registerUser' directory and all child directories
      include: "downloadShared/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: download-shared
          # HTTP method for this endpoint
          method: put
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  getSharedMetaData:
    handler: getSharedMetaData/get_shared_metadata.get_shared_metadata
    package:
      # Include 'registerUser' directory and all child directories
      include: "getSharedMetaData/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: shared-metadata
          # HTTP method for this endpoint
          method: put
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }


  addPermission:
    handler: addPermission/add_permission.add_permission
    package:
      # Include 'registerUser' directory and all child directories
      include: "addPermission/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: file-permission  
          # HTTP method for this endpoint
          method: post
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }


  sendNotification:
    handler: sendNotification/send_notification.send_notification
    package:
      # Include 'registerUser' directory and all child directories
      include: "sendNotification/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - sqs:
          arn: "arn:aws:sqs:eu-central-1:841941972097:notificationQueue"

  uploadMetaData:
    handler: metaDataUpload/upload_meta_data.upload_file
    package:
      # Include 'registerUser' directory and all child directories
      include: "metaDataUpload/**"
    # Specifies events that trigger the Lambda function

  renameMetaData:
    handler: renameMetaData/rename_metadata.rename_metadata
    package:
      # Include 'registerUser' directory and all child directories
      include: "renameMetaData/**"
    # Specifies events that trigger the Lambda function
    
  updateMetaData:
    handler: updateMetaData/update_metadata.update_metadata
    package:
      # Include 'registerUser' directory and all child directories
      include: "updateMetaData/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: update-metadata
          # HTTP method for this endpoint
          method: put
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  uploadFile:
    handler: fileUpload/upload_file.upload_file
    package:
      # Include 'registerUser' directory and all child directories
      include: "fileUpload/**"
    # Specifies events that trigger the Lambda function

  
  uploadFolder:
    handler: uploadFolder/upload_folder.upload_folder
    package:
      # Include 'registerUser' directory and all child directories
      include: "uploadFolder/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: upload-folder
          # HTTP method for this endpoint
          method: post
          # Enable CORS. Don't forget to return the right header in your response
          cors: true

          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  renameFolder:
    handler: renameFolder/rename_folder.rename_folder
    package:
      # Include 'registerUser' directory and all child directories
      include: "renameFolder/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: rename-folder
          # HTTP method for this endpoint
          method: post
          # Enable CORS. Don't forget to return the right header in your response
          cors: true

          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  moveFile:
    handler: moveFile/move_file.move_file
    package:
      # Include 'registerUser' directory and all child directories
      include: "moveFile/**"
    # Specifies events that trigger the Lambda function

  
  removeFile:
    handler: removeFile/remove_file.remove_file
    package:
      # Include 'registerUser' directory and all child directories
      include: "removeFile/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: remove-file
          # HTTP method for this endpoint
          method: put
          # Enable CORS. Don't forget to return the right header in your response
          cors: true

          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  removeFolder:
    handler: removeFolder/remove_folder.remove_folder
    package:
      # Include 'registerUser' directory and all child directories
      include: "removeFolder/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: remove-folder
          # HTTP method for this endpoint
          method: put
          # Enable CORS. Don't forget to return the right header in your response
          cors: true

          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  getSharedFiles:
    handler: getSharedFiles/get_shared_files.get_shared_files
    package:
      # Include 'registerUser' directory and all child directories
      include: "getSharedFiles/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: get-shared-files
          # HTTP method for this endpoint
          method: get
          # Enable CORS. Don't forget to return the right header in your response
          cors: true

          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }


  removePermission:
    handler: removeViewPermission/remove_view_permission.remove_permission
    package:
      include: "removeViewPermission/**"
    events:
      - http:
          path: file-permission
          method: delete
          cors: true

          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  getPermission:
    handler: getViewPermission/get_view_permission.get_permissions
    package:
      include: "getViewPermission/**"
    events:
      - http:
          path: file-permission
          method: get
          cors: true

          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  saveRequest:
    handler: saveRegistrationRequest/save_registration_request.save_request
    package:
      include: "saveRegistrationRequest/**"
    events:
      - http:
          path: save/registration-request
          method: post
          cors: true

  removeRequest:
    handler: removeRegistrationRequest/remove_registration_request.remove_request
    package:
      include: "removeRegistrationRequest/**"
    events:
      - http:
          path: registration-request
          method: delete
          cors: true

          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  getRequest:
    handler: getRegistrationRequests/get_registration_requests.get_requests
    package:
      include: "getRegistrationRequests/**"
    events:
      - http:
          path: registration-request
          method: get
          cors: true

          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  sendInvite:
    handler: sendInvite/send_invite.send_invite
    package:
      include: "sendInvite/**"
    events:
      - http:
          path: send-invite
          method: post
          cors: true

          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  acceptRequest:
    handler: acceptRegistrationRequest/accept_registration_request.accept_request
    package:
      include: "acceptRegistrationRequest/**"
    events:
      - http:
          path: accept-registration-request
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

  
  getEmail:
    handler: getEmail/get_email.get_email
    package:
      include: "getEmail/**"
    events:
      - http:
          path: get-email
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }
  
  testiramoStep:
    handler: testiramoStep/testiramo_step.testiramo_step
    package:
      include: "testiramoStep/**"
    
  testiramoStep2:
    handler: testiramoStep2/testiramo_step2.testiramo_step2
    package:
      include: "testiramoStep2/**" 

  undoUpload:
    handler: undoUpload/undo_upload.undo_upload
    package:
      include: "undoUpload/**" 
  
  undoMoving:
    handler: undoMoving/undo_moving.undo_moving
    package:
      include: "undoMoving/**" 

  sendToSqs:
    handler: sendToSqs/send_to_sqs.send_to_sqs
    package:
      include: "sendToSqs/**" 

  updateSharedMetaData:
    handler: updateSharedMetaData/update_shared_meta_data.update_shared_meta_data
    package:
      include: "updateSharedMetaData/**" 

stepFunctions:
  stateMachines:
    fileUploadStateMachine:
      events:
        - http:
            path: upload-file
            method: post
            cors: true
            authorizer:
              type: COGNITO_USER_POOLS
              authorizerId: { Ref: MyApiGatewayAuthorizer }
      definition:
        StartAt: uploadFile
        States:
          uploadFile:
            Type: Task
            Resource: 
              Fn::GetAtt: [uploadFile, Arn]
            Next: uploadMetaData
          
          uploadMetaData:
            Type: Task
            Resource: 
              Fn::GetAtt: [uploadMetaData, Arn]
            Catch:
            - ErrorEquals: ["States.ALL"]
              Next: undoUpload
            Next: sendToSqs

          sendToSqs:
            Type: Task
            Resource: 
              Fn::GetAtt: [sendToSqs, Arn]
            End: true
          
          undoUpload:
            Type: Task
            Resource:
              Fn::GetAtt: [undoUpload, Arn]
            ResultPath: "$.undoUploadResult"
            End: true
            
    fileRenameStateMachine:
      events:
        - http:
            path: move-file
            method: put
            cors: true
            authorizer:
              type: COGNITO_USER_POOLS
              authorizerId: { Ref: MyApiGatewayAuthorizer }
      definition:
        StartAt: moveFile
        States:
          moveFile:
            Type: Task
            Resource: 
              Fn::GetAtt: [moveFile, Arn]
            Next: renameMetaData
          
          renameMetaData:
            Type: Task
            Resource: 
              Fn::GetAtt: [renameMetaData, Arn]
            Catch:
            - ErrorEquals: ["States.ALL"]
              Next: undoMoving
            Next: updateSharedMetaData

          updateSharedMetaData:
            Type: Task
            Resource:  
              Fn::GetAtt: [updateSharedMetaData, Arn]
            Next: sendToSqs

          sendToSqs:
            Type: Task
            Resource: 
              Fn::GetAtt: [sendToSqs, Arn]
            End: true
          
          undoMoving:
            Type: Task
            Resource:
              Fn::GetAtt: [undoMoving, Arn]
            ResultPath: "$.undoUploadResult"
            OutputPath: "$.Payload"
            End: true

    testnaStateMasina:
      events:
        - http:
            path: step-test
            method: post
            cors: true
            authorizer:
              type: COGNITO_USER_POOLS
              authorizerId: { Ref: MyApiGatewayAuthorizer }
      definition:
        StartAt: uploadFile
        States:
          uploadFile:
            Type: Task
            Resource: 
              Fn::GetAtt: [uploadFile, Arn]
            Next: uploadMetaData
          
          uploadMetaData:
            Type: Task
            Resource: 
              Fn::GetAtt: [uploadMetaData, Arn]
            End: true

plugins:
    - serverless-step-functions

resources:
  Resources:
    notificationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: notificationQueue
        VisibilityTimeout: 300
        DelaySeconds: 0
        MaximumMessageSize: 262144
        ReceiveMessageWaitTimeSeconds: 20

    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: userTable
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    registrationRequestTable2:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: registrationRequestTable2
        AttributeDefinitions:
          - AttributeName: inviter_email
            AttributeType: S
          - AttributeName: invited_user_email
            AttributeType: S
        KeySchema:
          - AttributeName: inviter_email
            KeyType: HASH
          - AttributeName: invited_user_email
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    FilePermissionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: file-permissions
        AttributeDefinitions:
          - AttributeName: granted_user
            AttributeType: S
          - AttributeName: file_path
            AttributeType: S
        KeySchema:
          - AttributeName: granted_user
            KeyType: HASH
          - AttributeName: file_path
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    DynamoDbMetaData:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: meta-data
        AttributeDefinitions:
          - AttributeName: emailAndName
            AttributeType: S

        KeySchema:
          - AttributeName: emailAndName
            KeyType: HASH

        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    S3BucketForFiles:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: tim7-project-files-bucket
        AccessControl: Private
        CorsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              AllowedOrigins:
                - "*"

    MyUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: my-user-poll
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: OFF
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        UserPoolTags:
          TagKey: TagValue
    MyUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref MyUserPool
        ClientName: my-user-poll
        GenerateSecret: false

    MyApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 10
        IdentitySource: method.request.header.Authorization
        Name: MyCognitoAuthorizer
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - {
              "Fn::Join":
                [
                  "",
                  [
                    "arn:aws:cognito-idp:",
                    { Ref: "AWS::Region" },
                    ":",
                    { Ref: "AWS::AccountId" },
                    ":userpool/",
                    Ref: MyUserPool,
                  ],
                ],
            }
