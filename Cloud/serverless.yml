service: cloud-project
frameworkVersion: "3"

provider:
  name: aws
  runtime: python3.7
  profile: Martic
  stage: dev
  region: eu-central-1
  memorySize: 128
  timeout: 10
  environment:
    USER_TABLE: !Ref userTable
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "Fn::GetAtt": [userTable, Arn]

# Packaging global configuration
package:
  # Create separate zip for each Lambda function
  individually: true
  patterns:
    # Exclude everything (each Lambda will specify which directory should be included)
    # To exclude use '!' prefix
    - "!**/**"
    # Include utility directory for every Lambda function
    - "utility/**"

functions:
  saveUser:
    handler: saveUser/save_user.save
    package:
      # Include 'registerUser' directory and all child directories
      include: "saveUser/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: users
          # HTTP method for this endpoint
          method: post
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
  getUsers:
    handler: getUsers/get_users.get_all_users
    package:
      # Include 'registerUser' directory and all child directories
      include: "getUsers/**"
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: users
          # HTTP method for this endpoint
          method: get
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: { Ref: MyApiGatewayAuthorizer }

resources:
  Resources:
    userTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: userTable
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    MyUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: my-user-poll
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        MfaConfiguration: OFF
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        UserPoolTags:
          TagKey: TagValue
    MyUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref MyUserPool
        ClientName: my-user-poll
        GenerateSecret: false

    MyApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 10
        IdentitySource: method.request.header.Authorization
        Name: MyCognitoAuthorizer
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - {
              "Fn::Join":
                [
                  "",
                  [
                    "arn:aws:cognito-idp:",
                    { Ref: "AWS::Region" },
                    ":",
                    { Ref: "AWS::AccountId" },
                    ":userpool/",
                    Ref: MyUserPool,
                  ],
                ],
            }
