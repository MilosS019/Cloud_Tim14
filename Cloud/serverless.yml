service: api-gateway-demo
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.7
  stage: dev
  region: eu-central-1
  memorySize: 128
  timeout: 10
  environment:
    TABLE_NAME:
      Ref: dogsTable
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [dogsTable, Arn]

# Packaging global configuration
package:
  # Create separate zip for each Lambda function
  individually: true
  patterns:
    # Exclude everything (each Lambda will specify which directory should be included)
    # To exclude use '!' prefix
    - '!**/**'
    # Include utility directory for every Lambda function
    - 'utility/**'

functions:
  createDog:
    handler: createDogs/create_dogs.create
    package:
      # Include 'createDogs' directory and all child directories
      include: 'createDogs/**'
    # Specifies events that trigger the Lambda function
    events:
      # REST API endpoint of API Gateway
      - http:
          # Path for this endpoint
          path: dogs
          # HTTP method for this endpoint
          method: post
          # Enable CORS. Don't forget to return the right header in your response
          cors: true
  
  getDogs:
    handler: getDogs/get_dogs.get_all
    package:
      include: 'getDogs/**'
    events:
      - http:
          path: dogs
          method: get
          cors: true
  
  getDog:
    handler: getDog/get_dog.get_one
    package:
      include: 'getDog/**'
    events:
      - http:
          # Path parameter 'name'
          path: dogs/{name}
          method: get
          cors: true
          # Specifying path parameters
          request:
            parameters:
              paths:
                # Mark path parameter 'name' as required
                name: true
  
  deleteDog:
    handler: deleteDog/delete_dog.delete
    package:
      include: 'deleteDog/**'
    events:
      - http:
          # Path parameter 'name'
          path: dogs/{name}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                name: true

resources:
  Resources:
    dogsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: serverlessDogsTable
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
