{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "SaveUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-saveUser"
      }
    },
    "GetUsersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-getUsers"
      }
    },
    "GetFoldersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-getFolders"
      }
    },
    "GetFilesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-getFiles"
      }
    },
    "DownloadFilesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-downloadFiles"
      }
    },
    "GetMetaDataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-getMetaData"
      }
    },
    "UploadMetaDataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-uploadMetaData"
      }
    },
    "RenameMetaDataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-renameMetaData"
      }
    },
    "UpdateMetaDataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-updateMetaData"
      }
    },
    "UploadFileLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-uploadFile"
      }
    },
    "UploadFolderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-uploadFolder"
      }
    },
    "AddPermissionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-addPermission"
      }
    },
    "RenameFolderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-renameFolder"
      }
    },
    "MoveFileLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-moveFile"
      }
    },
    "RemoveFileLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-removeFile"
      }
    },
    "RemoveFolderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-removeFolder"
      }
    },
    "RemovePermissionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-removePermission"
      }
    },
    "GetPermissionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-getPermission"
      }
    },
    "SaveRequestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-saveRequest"
      }
    },
    "RemoveRequestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-removeRequest"
      }
    },
    "GetRequestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-getRequest"
      }
    },
    "SendInviteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-sendInvite"
      }
    },
    "AcceptRequestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-acceptRequest"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "cloud-project",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cloud-project-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cloud-project-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:SendEmail",
                    "ses:SendRawEmail"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-idp:AdminCreateUser",
                    "cognito-idp:AdminUpdateUserAttributes",
                    "cognito-idp:AdminSetUserPassword"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:VerifyEmailIdentity"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:ListVerifiedEmailAddresses"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "userTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "FilePermissionsTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "DynamoDbMetaData",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "registrationRequestTable2",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket",
                    "s3:GetObject",
                    "s3:GetObjectAcl",
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:DeleteObject"
                  ],
                  "Resource": [
                    "arn:aws:s3:::tim7-project-files-bucket",
                    "arn:aws:s3:::tim7-project-files-bucket/*"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "cloud-project",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "SaveUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
<<<<<<< HEAD
          "S3Key": "serverless/cloud-project/dev/1687614608615-2023-06-24T13:50:08.615Z/saveUser.zip"
=======
          "S3Key": "serverless/cloud-project/dev/1687609577299-2023-06-24T12:26:17.299Z/saveUser.zip"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        },
        "Handler": "saveUser/save_user.save",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-saveUser",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SaveUserLogGroup"
      ]
    },
    "GetUsersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
<<<<<<< HEAD
          "S3Key": "serverless/cloud-project/dev/1687614608615-2023-06-24T13:50:08.615Z/getUsers.zip"
=======
          "S3Key": "serverless/cloud-project/dev/1687609577299-2023-06-24T12:26:17.299Z/getUsers.zip"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        },
        "Handler": "getUsers/get_users.get_all_users",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-getUsers",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetUsersLogGroup"
      ]
    },
    "GetFoldersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
<<<<<<< HEAD
          "S3Key": "serverless/cloud-project/dev/1687614608615-2023-06-24T13:50:08.615Z/getFolders.zip"
=======
          "S3Key": "serverless/cloud-project/dev/1687609577299-2023-06-24T12:26:17.299Z/getFolders.zip"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        },
        "Handler": "getFolders/get_folders.get_all_folders",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-getFolders",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetFoldersLogGroup"
      ]
    },
    "GetFilesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
<<<<<<< HEAD
          "S3Key": "serverless/cloud-project/dev/1687614608615-2023-06-24T13:50:08.615Z/getFiles.zip"
=======
          "S3Key": "serverless/cloud-project/dev/1687609577299-2023-06-24T12:26:17.299Z/getFiles.zip"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        },
        "Handler": "getFiles/get_files.get_files",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-getFiles",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetFilesLogGroup"
      ]
    },
    "DownloadFilesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
<<<<<<< HEAD
          "S3Key": "serverless/cloud-project/dev/1687614608615-2023-06-24T13:50:08.615Z/downloadFiles.zip"
=======
          "S3Key": "serverless/cloud-project/dev/1687609577299-2023-06-24T12:26:17.299Z/downloadFiles.zip"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        },
        "Handler": "fileDownload/download_file.download_file",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-downloadFiles",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DownloadFilesLogGroup"
      ]
    },
    "GetMetaDataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
<<<<<<< HEAD
          "S3Key": "serverless/cloud-project/dev/1687614608615-2023-06-24T13:50:08.615Z/getMetaData.zip"
=======
          "S3Key": "serverless/cloud-project/dev/1687609577299-2023-06-24T12:26:17.299Z/getMetaData.zip"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        },
        "Handler": "getMetaData/get_metadata.get_metadata",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-getMetaData",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetMetaDataLogGroup"
      ]
    },
    "UploadMetaDataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
<<<<<<< HEAD
          "S3Key": "serverless/cloud-project/dev/1687614608615-2023-06-24T13:50:08.615Z/uploadMetaData.zip"
=======
          "S3Key": "serverless/cloud-project/dev/1687609577299-2023-06-24T12:26:17.299Z/uploadMetaData.zip"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        },
        "Handler": "metaDataUpload/upload_meta_data.upload_file",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-uploadMetaData",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UploadMetaDataLogGroup"
      ]
    },
    "RenameMetaDataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687614608615-2023-06-24T13:50:08.615Z/renameMetaData.zip"
        },
        "Handler": "renameMetaData/rename_metadata.rename_metadata",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-renameMetaData",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RenameMetaDataLogGroup"
      ]
    },
    "UpdateMetaDataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687614608615-2023-06-24T13:50:08.615Z/updateMetaData.zip"
        },
        "Handler": "updateMetaData/update_metadata.update_metadata",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-updateMetaData",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateMetaDataLogGroup"
      ]
    },
    "UploadFileLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
<<<<<<< HEAD
          "S3Key": "serverless/cloud-project/dev/1687614608615-2023-06-24T13:50:08.615Z/uploadFile.zip"
=======
          "S3Key": "serverless/cloud-project/dev/1687609577299-2023-06-24T12:26:17.299Z/uploadFile.zip"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        },
        "Handler": "fileUpload/upload_file.upload_file",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-uploadFile",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UploadFileLogGroup"
      ]
    },
    "UploadFolderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687614608615-2023-06-24T13:50:08.615Z/uploadFolder.zip"
        },
        "Handler": "uploadFolder/upload_folder.upload_folder",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-uploadFolder",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UploadFolderLogGroup"
      ]
    },
    "AddPermissionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
<<<<<<< HEAD
          "S3Key": "serverless/cloud-project/dev/1687614608615-2023-06-24T13:50:08.615Z/addPermission.zip"
=======
          "S3Key": "serverless/cloud-project/dev/1687609577299-2023-06-24T12:26:17.299Z/addPermission.zip"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        },
        "Handler": "addViewPermission/add_view_permission.add_permission",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-addPermission",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddPermissionLogGroup"
      ]
    },
    "RenameFolderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687614608615-2023-06-24T13:50:08.615Z/renameFolder.zip"
        },
        "Handler": "renameFolder/rename_folder.rename_folder",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-renameFolder",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RenameFolderLogGroup"
      ]
    },
    "MoveFileLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687614608615-2023-06-24T13:50:08.615Z/moveFile.zip"
        },
        "Handler": "moveFile/move_file.move_file",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-moveFile",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "MoveFileLogGroup"
      ]
    },
    "RemoveFileLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687614608615-2023-06-24T13:50:08.615Z/removeFile.zip"
        },
        "Handler": "removeFile/remove_file.remove_file",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-removeFile",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RemoveFileLogGroup"
      ]
    },
    "RemoveFolderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687614608615-2023-06-24T13:50:08.615Z/removeFolder.zip"
        },
        "Handler": "removeFolder/remove_folder.remove_folder",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-removeFolder",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RemoveFolderLogGroup"
      ]
    },
    "RemovePermissionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
<<<<<<< HEAD
          "S3Key": "serverless/cloud-project/dev/1687614608615-2023-06-24T13:50:08.615Z/removePermission.zip"
=======
          "S3Key": "serverless/cloud-project/dev/1687609577299-2023-06-24T12:26:17.299Z/removePermission.zip"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        },
        "Handler": "removeViewPermission/remove_view_permission.remove_permission",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-removePermission",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RemovePermissionLogGroup"
      ]
    },
<<<<<<< HEAD
    "GetFoldersLambdaVersionCplGVRGg0Rko00r5yzdexaUYQWUzuNigsf4Orld8Ic": {
=======
    "GetPermissionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687609577299-2023-06-24T12:26:17.299Z/getPermission.zip"
        },
        "Handler": "getViewPermission/get_view_permission.get_permissions",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-getPermission",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetPermissionLogGroup"
      ]
    },
    "SaveRequestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687609577299-2023-06-24T12:26:17.299Z/saveRequest.zip"
        },
        "Handler": "saveRegistrationRequest/save_registration_request.save_request",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-saveRequest",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SaveRequestLogGroup"
      ]
    },
    "RemoveRequestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687609577299-2023-06-24T12:26:17.299Z/removeRequest.zip"
        },
        "Handler": "removeRegistrationRequest/remove_registration_request.remove_request",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-removeRequest",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RemoveRequestLogGroup"
      ]
    },
    "GetRequestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687609577299-2023-06-24T12:26:17.299Z/getRequest.zip"
        },
        "Handler": "getRegistrationRequests/get_registration_requests.get_requests",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-getRequest",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetRequestLogGroup"
      ]
    },
    "SendInviteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687609577299-2023-06-24T12:26:17.299Z/sendInvite.zip"
        },
        "Handler": "sendInvite/send_invite.send_invite",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-sendInvite",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SendInviteLogGroup"
      ]
    },
    "AcceptRequestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687609577299-2023-06-24T12:26:17.299Z/acceptRequest.zip"
        },
        "Handler": "acceptRegistrationRequest/accept_registration_request.accept_request",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-acceptRequest",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AcceptRequestLogGroup"
      ]
    },
    "SaveUserLambdaVersion0fhP1yQ7bDM5heKsRA5ZOoFHjxqzCDBKcpWmCIWCo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SaveUserLambdaFunction"
        },
        "CodeSha256": "dSrKTqI7xImNYhefhwxOj9PGpFeJDdnm8ceXaLjDRJQ="
      }
    },
    "GetFoldersLambdaVersionBOs4bNeRPBxNe25rBrRQ6ebxGQcY1KvY4w6fQyX0s": {
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetFoldersLambdaFunction"
        },
        "CodeSha256": "7yFlVpGnjBsXcLMY2E1Wn5lt+r2ZpZj8Mj6cH0fDLzM="
      }
    },
<<<<<<< HEAD
    "GetFilesLambdaVersionI3gjpC4gkt08AwmBwNgS6wkmNOi6KpznA3MWKJJfNng": {
=======
    "GetFilesLambdaVersionEaDEdgF86Q0nDYNSEQEjx2bMvg4jpl7R9z7ygzdSm8": {
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetFilesLambdaFunction"
        },
        "CodeSha256": "nXtISlT6MsG9vSaNUOePp13s7PQlbL8tbyNL/eumGZ4="
      }
    },
<<<<<<< HEAD
    "SaveUserLambdaVersionUjE4Pxntmv39sWegO8XcjVHq9HGCzE5lehPxDQLHcQ": {
=======
    "DownloadFilesLambdaVersionqgCA6IFpQKdV1gDCdtL1XU69lbIIvCG64pEJbkssds": {
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SaveUserLambdaFunction"
        },
<<<<<<< HEAD
        "CodeSha256": "gcPAaLkO2me5OTHuc6s/cun0lhLqci9r20JCta7xK3I="
=======
        "CodeSha256": "AH0f4Qu1kP3Q+sfSOrtafVW5O/aPo0v4kAR33dwtBg4="
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      }
    },
    "GetUsersLambdaVersionS2pedCbS3FjBk4cTynP50oDjSdcML24RwAIlfFzoVE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUsersLambdaFunction"
        },
        "CodeSha256": "2wcTK9CGzqZJdZgNGo7DesjbREqpBKiNJxSqonjxCwg="
      }
    },
<<<<<<< HEAD
    "DownloadFilesLambdaVersionNXuLwn1YLzSRNRMrVKYGM8XzIKjNLYovfO9tuWugLQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DownloadFilesLambdaFunction"
        },
        "CodeSha256": "SsheMWmObGoI3UwTU1SqVQwF6ELHmWeYJfw/gvUar0I="
      }
    },
    "UploadMetaDataLambdaVersionnchbkm8kJ5v8yRRU0KhZAURKxUqLuy2dWt6vKO1G4": {
=======
    "UploadMetaDataLambdaVersionqbpaNjNMfpAOEpzKCHQTaUXE14Pli1Fkak4okdEeI": {
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadMetaDataLambdaFunction"
        },
        "CodeSha256": "YnUUfkY0NT6+U5fDdmqYYbOaQxHvnpZOzilF2QRE5Kw="
      }
    },
<<<<<<< HEAD
    "RenameMetaDataLambdaVersioneMhq9dMh5EWwAOS44VNNWZAIXmhqIsfpxGVwxNAiqI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RenameMetaDataLambdaFunction"
        },
        "CodeSha256": "7Quyqa2E0DTCkIBSa/iW4ouNPHU6uIwyggGEY33gDtQ="
      }
    },
    "GetUsersLambdaVersionU4QvGuICMezDGIafLv7YVLR5pUgDmkeGBiO9MFIjTkA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUsersLambdaFunction"
        },
        "CodeSha256": "wBkWF5igTFzXA/KZoCThj0vEjF7ubo29j1XTktV4Hsw="
      }
    },
    "UploadFileLambdaVersionG7vznKzBPMK5RO7buTn3aczFTERjsybJMI7fCVeA": {
=======
    "GetMetaDataLambdaVersion9fmLH8Tvt42p0MN2sPnRJB08EHWjnQdmtG9vvJEemEs": {
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetMetaDataLambdaFunction"
        },
        "CodeSha256": "JzEEXQJDBrQw2youKArZxzM+9QeuauJ6U9k5lxkYpc8="
      }
    },
<<<<<<< HEAD
    "UpdateMetaDataLambdaVersionjqTzYj7nn5462VcPGpEyEBK2LtofiJcteLQqWDhqOo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateMetaDataLambdaFunction"
        },
        "CodeSha256": "oeswE2DL3p3uJcaQqd/3W55el8eeR399XKhBUFrIzMw="
      }
    },
    "AddPermissionLambdaVersion6I69e4KDIeqUtZoqkUHantLjgMPwe17KGSqHBejVxQ": {
=======
    "AddPermissionLambdaVersiony17SAlhDlXQGK7aYwSnrRu32yY1svWM3RFOz82U": {
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddPermissionLambdaFunction"
        },
<<<<<<< HEAD
        "CodeSha256": "o9UHMLZ/xRl+WXb7NVoBjuvgG3LfSq4uhMm/kJE1RrE="
      }
    },
    "RenameFolderLambdaVersionawUHGjaWxVFPqHIPGuTHZUptq3sJv3A6J3Apq8ARM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RenameFolderLambdaFunction"
        },
        "CodeSha256": "v3y9yAy+BoGsODyMWycIUErvCYsC9dmp3NLXP7IRCLk="
      }
    },
    "UploadFolderLambdaVersionHhMPiVPzmZEvnUgWBlq0U1f8wB9poXlAhMNk5VKg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadFolderLambdaFunction"
        },
        "CodeSha256": "6eb1JwlxVvAPTQSdtWbNxgMdyDFJSFKO5tjqAbiDRyc="
      }
    },
    "RemoveFileLambdaVersionuRlRU1DeWRBeF4pc4kEKDyJwic5YJyzdYAvfkDN5Cc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemoveFileLambdaFunction"
        },
        "CodeSha256": "6bCPk3B3HwEpYQ/VsZ2xeAbYvC+K5NR9yzD7O4EhRjo="
      }
    },
    "RemoveFolderLambdaVersionOURq3upzw6KDAYBY3UnlrZ3OQSo3s0fsT65rY2E0Q": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemoveFolderLambdaFunction"
        },
        "CodeSha256": "vYMO27fKkdvajNz3prwNnrs0CuuH/25Dp16ST7VOFe0="
      }
    },
    "MoveFileLambdaVersion1S8PbrrACaiDTjJHKY6FKL99Vdn1xLeKFOybW61tI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MoveFileLambdaFunction"
        },
        "CodeSha256": "c9OI2Cf/k6FKsVYXDN/Ed7AOvANwF2fSocROYDHtF/o="
=======
        "CodeSha256": "mDsGa/lE5+bEuI/2qsYmg4BXYdSstKaiOwvGBkjONcA="
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      }
    },
    "UploadFileLambdaVersionjwQxNRunzLItXe2IUaLjJ6LS0BcfYi0YyjUZvNbmg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadFileLambdaFunction"
        },
        "CodeSha256": "TzxNdKlOgMnhxv2mtuWhjSNA8cWYVG6KyGPoBEYkIA8="
      }
    },
    "RemovePermissionLambdaVersionoaSPq1UiTzp8cMVXhaq8n6G4DgiGtVyiRghelxKxAc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemovePermissionLambdaFunction"
        },
        "CodeSha256": "+56S5Y6MwxkOopIz2ayW2nB+6c8u/VzWysxvpq8aIjw="
      }
    },
    "SaveRequestLambdaVersionSduJ9H4CPZYknhyGDpNrKIObOCFp8mQH5GHfwJ5u4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SaveRequestLambdaFunction"
        },
        "CodeSha256": "63j5UETfixZehsMWgbIEwz0svrtrbM122AR0Jzo+uJE="
      }
    },
    "GetPermissionLambdaVersionXtlQSdt6LYdqPhz6aWRSqzjaT2L71KVUoU51lK92Ug": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetPermissionLambdaFunction"
        },
        "CodeSha256": "5kJEiysVgqqMG13tfx7gwbyHCCQcfx2EvjY81h9W3eQ="
      }
    },
    "RemoveRequestLambdaVersionhYugnSQCLu4R0BxHGIq6j8UP562Dr4KdaTTW6HGCgM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemoveRequestLambdaFunction"
        },
        "CodeSha256": "94rQ3fxkkErbCbE53kvP8TqKfqQdkZuNf2eowSCTVsU="
      }
    },
    "GetRequestLambdaVersion5w3lZFK0R0jxB4WadMiKd4qgNJSCtc2xjdqrZaORIOI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetRequestLambdaFunction"
        },
        "CodeSha256": "MEh/0m9SOLB74J3ozVIu33npgxW52SyRDnl8ANnil1w="
      }
    },
    "SendInviteLambdaVersionsbk7QZhAmtZQ7GfmltOyqU0MY7cOjDc2PIGYSTMVdCE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SendInviteLambdaFunction"
        },
        "CodeSha256": "55zOpjGI/ZwxldfsmZ8s8N2s/oY3BF3tSMh8RfAI4rc="
      }
    },
    "AcceptRequestLambdaVersionYH5l6Vu20q6EIwKuT3KuLs8lQPUvjgIhhascgNgk2QU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AcceptRequestLambdaFunction"
        },
        "CodeSha256": "KUJ261H3pK/xE/jMsgcAbvbZgCRuPNa+XwEIfD/bepI="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-cloud-project",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceSave": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "save",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSaveUsers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceSave"
        },
        "PathPart": "users",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSaveRegistrationDashrequest": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceSave"
        },
        "PathPart": "registration-request",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "users",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFolders": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "folders",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFiles": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "files",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDownload": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "download",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMetadata": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "metadata",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUploadDashmetadata": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "upload-metadata",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceRenameDashmetadata": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "rename-metadata",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUpdateDashmetadata": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "update-metadata",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUploadDashfile": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "upload-file",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUploadDashfolder": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "upload-folder",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFileDashpermission": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "file-permission",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
<<<<<<< HEAD
    "ApiGatewayResourceRenameDashfolder": {
=======
    "ApiGatewayResourceRegistrationDashrequest": {
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
<<<<<<< HEAD
        "PathPart": "rename-folder",
=======
        "PathPart": "registration-request",
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
<<<<<<< HEAD
    "ApiGatewayResourceMoveDashfile": {
=======
    "ApiGatewayResourceSendDashinvite": {
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
<<<<<<< HEAD
        "PathPart": "move-file",
=======
        "PathPart": "send-invite",
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
<<<<<<< HEAD
    "ApiGatewayResourceRemoveDashfile": {
=======
    "ApiGatewayResourceAcceptDashregistrationDashrequest": {
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
<<<<<<< HEAD
        "PathPart": "remove-file",
=======
        "PathPart": "accept-registration-request",
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
<<<<<<< HEAD
    "ApiGatewayResourceRemoveDashfolder": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "remove-folder",
=======
    "ApiGatewayMethodSaveUsersOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSaveUsers"
        },
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodFoldersOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceFolders"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodFilesOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceFiles"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodDownloadOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceDownload"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodMetadataOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceMetadata"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUploadDashmetadataOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUploadDashmetadata"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodRenameDashmetadataOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceRenameDashmetadata"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUpdateDashmetadataOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUpdateDashmetadata"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUploadDashfileOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUploadDashfile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUploadDashfolderOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUploadDashfolder"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodFileDashpermissionOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,DELETE,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceFileDashpermission"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
<<<<<<< HEAD
    "ApiGatewayMethodRenameDashfolderOptions": {
=======
    "ApiGatewayMethodSaveRegistrationDashrequestOptions": {
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
<<<<<<< HEAD
          "Ref": "ApiGatewayResourceRenameDashfolder"
=======
          "Ref": "ApiGatewayResourceSaveRegistrationDashrequest"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
<<<<<<< HEAD
    "ApiGatewayMethodMoveDashfileOptions": {
=======
    "ApiGatewayMethodRegistrationDashrequestOptions": {
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
<<<<<<< HEAD
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
=======
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,DELETE'"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
<<<<<<< HEAD
          "Ref": "ApiGatewayResourceMoveDashfile"
=======
          "Ref": "ApiGatewayResourceRegistrationDashrequest"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
<<<<<<< HEAD
    "ApiGatewayMethodRemoveDashfileOptions": {
=======
    "ApiGatewayMethodSendDashinviteOptions": {
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
<<<<<<< HEAD
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
=======
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
<<<<<<< HEAD
          "Ref": "ApiGatewayResourceRemoveDashfile"
=======
          "Ref": "ApiGatewayResourceSendDashinvite"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
<<<<<<< HEAD
    "ApiGatewayMethodRemoveDashfolderOptions": {
=======
    "ApiGatewayMethodAcceptDashregistrationDashrequestOptions": {
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
<<<<<<< HEAD
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
=======
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
<<<<<<< HEAD
          "Ref": "ApiGatewayResourceRemoveDashfolder"
=======
          "Ref": "ApiGatewayResourceAcceptDashregistrationDashrequest"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
<<<<<<< HEAD
    "ApiGatewayMethodUsersPost": {
=======
    "ApiGatewayMethodSaveUsersPost": {
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSaveUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SaveUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SaveUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetUsersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFoldersGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFolders"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetFoldersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetFoldersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFilesPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFiles"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetFilesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetFilesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodDownloadPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceDownload"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DownloadFilesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DownloadFilesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMetadataPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMetadata"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetMetaDataLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetMetaDataLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUploadDashmetadataPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUploadDashmetadata"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UploadMetaDataLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UploadMetaDataLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodRenameDashmetadataPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRenameDashmetadata"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RenameMetaDataLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RenameMetaDataLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUpdateDashmetadataPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUpdateDashmetadata"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateMetaDataLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateMetaDataLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUploadDashfilePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUploadDashfile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UploadFileLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UploadFileLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUploadDashfolderPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUploadDashfolder"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UploadFolderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UploadFolderLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFileDashpermissionPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFileDashpermission"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddPermissionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AddPermissionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodRenameDashfolderPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRenameDashfolder"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RenameFolderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RenameFolderLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMoveDashfilePut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMoveDashfile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "MoveFileLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "MoveFileLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodRemoveDashfilePut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRemoveDashfile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemoveFileLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RemoveFileLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodRemoveDashfolderPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRemoveDashfolder"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemoveFolderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RemoveFolderLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFileDashpermissionDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFileDashpermission"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemovePermissionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RemovePermissionLambdaPermissionApiGateway"
      ]
    },
<<<<<<< HEAD
    "ApiGatewayDeployment1687614606809": {
=======
    "ApiGatewayMethodFileDashpermissionGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFileDashpermission"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetPermissionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetPermissionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSaveRegistrationDashrequestPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSaveRegistrationDashrequest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SaveRequestLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SaveRequestLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodRegistrationDashrequestDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRegistrationDashrequest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemoveRequestLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RemoveRequestLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodRegistrationDashrequestGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRegistrationDashrequest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetRequestLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetRequestLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSendDashinvitePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSendDashinvite"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SendInviteLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SendInviteLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAcceptDashregistrationDashrequestPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAcceptDashregistrationDashrequest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AcceptRequestLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AcceptRequestLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1687609574367": {
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodSaveUsersOptions",
        "ApiGatewayMethodUsersOptions",
        "ApiGatewayMethodFoldersOptions",
        "ApiGatewayMethodFilesOptions",
        "ApiGatewayMethodDownloadOptions",
        "ApiGatewayMethodMetadataOptions",
        "ApiGatewayMethodUploadDashmetadataOptions",
        "ApiGatewayMethodRenameDashmetadataOptions",
        "ApiGatewayMethodUpdateDashmetadataOptions",
        "ApiGatewayMethodUploadDashfileOptions",
        "ApiGatewayMethodUploadDashfolderOptions",
        "ApiGatewayMethodFileDashpermissionOptions",
<<<<<<< HEAD
        "ApiGatewayMethodRenameDashfolderOptions",
        "ApiGatewayMethodMoveDashfileOptions",
        "ApiGatewayMethodRemoveDashfileOptions",
        "ApiGatewayMethodRemoveDashfolderOptions",
        "ApiGatewayMethodUsersPost",
=======
        "ApiGatewayMethodSaveRegistrationDashrequestOptions",
        "ApiGatewayMethodRegistrationDashrequestOptions",
        "ApiGatewayMethodSendDashinviteOptions",
        "ApiGatewayMethodAcceptDashregistrationDashrequestOptions",
        "ApiGatewayMethodSaveUsersPost",
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
        "ApiGatewayMethodUsersGet",
        "ApiGatewayMethodFoldersGet",
        "ApiGatewayMethodFilesPut",
        "ApiGatewayMethodDownloadPut",
        "ApiGatewayMethodMetadataPut",
        "ApiGatewayMethodUploadDashmetadataPost",
        "ApiGatewayMethodRenameDashmetadataPut",
        "ApiGatewayMethodUpdateDashmetadataPut",
        "ApiGatewayMethodUploadDashfilePost",
        "ApiGatewayMethodUploadDashfolderPost",
        "ApiGatewayMethodFileDashpermissionPost",
<<<<<<< HEAD
        "ApiGatewayMethodRenameDashfolderPost",
        "ApiGatewayMethodMoveDashfilePut",
        "ApiGatewayMethodRemoveDashfilePut",
        "ApiGatewayMethodRemoveDashfolderPut",
        "ApiGatewayMethodFileDashpermissionDelete"
=======
        "ApiGatewayMethodFileDashpermissionDelete",
        "ApiGatewayMethodFileDashpermissionGet",
        "ApiGatewayMethodSaveRegistrationDashrequestPost",
        "ApiGatewayMethodRegistrationDashrequestDelete",
        "ApiGatewayMethodRegistrationDashrequestGet",
        "ApiGatewayMethodSendDashinvitePost",
        "ApiGatewayMethodAcceptDashregistrationDashrequestPost"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      ]
    },
    "SaveUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SaveUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUsersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUsersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetFoldersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetFoldersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetFilesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetFilesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DownloadFilesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DownloadFilesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetMetaDataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetMetaDataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UploadMetaDataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UploadMetaDataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RenameMetaDataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RenameMetaDataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateMetaDataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateMetaDataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UploadFileLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UploadFileLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UploadFolderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UploadFolderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AddPermissionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddPermissionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RenameFolderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RenameFolderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "MoveFileLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "MoveFileLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemoveFileLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemoveFileLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemoveFolderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemoveFolderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemovePermissionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemovePermissionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetPermissionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetPermissionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SaveRequestLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SaveRequestLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemoveRequestLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemoveRequestLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetRequestLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetRequestLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SendInviteLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SendInviteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AcceptRequestLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AcceptRequestLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "userTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "userTable",
        "AttributeDefinitions": [
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "email",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    },
    "registrationRequestTable2": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "registrationRequestTable2",
        "AttributeDefinitions": [
          {
            "AttributeName": "inviter_email",
            "AttributeType": "S"
          },
          {
            "AttributeName": "invited_user_email",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "inviter_email",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "invited_user_email",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    },
    "FilePermissionsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "file-permissions",
        "AttributeDefinitions": [
          {
            "AttributeName": "granted_user",
            "AttributeType": "S"
          },
          {
            "AttributeName": "file_path",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "granted_user",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "file_path",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    },
    "DynamoDbMetaData": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "meta-data",
        "AttributeDefinitions": [
          {
            "AttributeName": "emailAndName",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "emailAndName",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    },
    "S3BucketForFiles": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "tim7-project-files-bucket",
        "AccessControl": "Private",
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedMethods": [
                "GET",
                "PUT",
                "POST",
                "DELETE"
              ],
              "AllowedOrigins": [
                "*"
              ]
            }
          ]
        }
      }
    },
    "MyUserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": "my-user-poll",
        "UsernameAttributes": [
          "email"
        ],
        "AutoVerifiedAttributes": [
          "email"
        ],
        "MfaConfiguration": "OFF",
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_email",
              "Priority": 1
            }
          ]
        },
        "UserPoolTags": {
          "TagKey": "TagValue"
        }
      }
    },
    "MyUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "UserPoolId": {
          "Ref": "MyUserPool"
        },
        "ClientName": "my-user-poll",
        "GenerateSecret": false
      }
    },
    "MyApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 10,
        "IdentitySource": "method.request.header.Authorization",
        "Name": "MyCognitoAuthorizer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Type": "COGNITO_USER_POOLS",
        "ProviderARNs": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:cognito-idp:",
                {
                  "Ref": "AWS::Region"
                },
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":userpool/",
                {
                  "Ref": "MyUserPool"
                }
              ]
            ]
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-ServerlessDeploymentBucketName"
      }
    },
<<<<<<< HEAD
=======
    "SaveUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SaveUserLambdaVersion0fhP1yQ7bDM5heKsRA5ZOoFHjxqzCDBKcpWmCIWCo"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-SaveUserLambdaFunctionQualifiedArn"
      }
    },
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
    "GetFoldersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetFoldersLambdaVersionBOs4bNeRPBxNe25rBrRQ6ebxGQcY1KvY4w6fQyX0s"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-GetFoldersLambdaFunctionQualifiedArn"
      }
    },
    "GetFilesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetFilesLambdaVersionEaDEdgF86Q0nDYNSEQEjx2bMvg4jpl7R9z7ygzdSm8"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-GetFilesLambdaFunctionQualifiedArn"
      }
    },
    "SaveUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
<<<<<<< HEAD
        "Ref": "SaveUserLambdaVersionUjE4Pxntmv39sWegO8XcjVHq9HGCzE5lehPxDQLHcQ"
=======
        "Ref": "DownloadFilesLambdaVersionqgCA6IFpQKdV1gDCdtL1XU69lbIIvCG64pEJbkssds"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      },
      "Export": {
        "Name": "sls-cloud-project-dev-SaveUserLambdaFunctionQualifiedArn"
      }
    },
    "GetUsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUsersLambdaVersionS2pedCbS3FjBk4cTynP50oDjSdcML24RwAIlfFzoVE"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-GetUsersLambdaFunctionQualifiedArn"
      }
    },
    "DownloadFilesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DownloadFilesLambdaVersionNXuLwn1YLzSRNRMrVKYGM8XzIKjNLYovfO9tuWugLQ"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-DownloadFilesLambdaFunctionQualifiedArn"
      }
    },
    "UploadMetaDataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadMetaDataLambdaVersionqbpaNjNMfpAOEpzKCHQTaUXE14Pli1Fkak4okdEeI"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-UploadMetaDataLambdaFunctionQualifiedArn"
      }
    },
<<<<<<< HEAD
    "RenameMetaDataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RenameMetaDataLambdaVersioneMhq9dMh5EWwAOS44VNNWZAIXmhqIsfpxGVwxNAiqI"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-RenameMetaDataLambdaFunctionQualifiedArn"
      }
    },
    "GetUsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUsersLambdaVersionU4QvGuICMezDGIafLv7YVLR5pUgDmkeGBiO9MFIjTkA"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-GetUsersLambdaFunctionQualifiedArn"
      }
    },
    "UploadFileLambdaFunctionQualifiedArn": {
=======
    "GetMetaDataLambdaFunctionQualifiedArn": {
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetMetaDataLambdaVersion9fmLH8Tvt42p0MN2sPnRJB08EHWjnQdmtG9vvJEemEs"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-GetMetaDataLambdaFunctionQualifiedArn"
      }
    },
    "UpdateMetaDataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateMetaDataLambdaVersionjqTzYj7nn5462VcPGpEyEBK2LtofiJcteLQqWDhqOo"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-UpdateMetaDataLambdaFunctionQualifiedArn"
      }
    },
    "AddPermissionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
<<<<<<< HEAD
        "Ref": "AddPermissionLambdaVersion6I69e4KDIeqUtZoqkUHantLjgMPwe17KGSqHBejVxQ"
=======
        "Ref": "AddPermissionLambdaVersiony17SAlhDlXQGK7aYwSnrRu32yY1svWM3RFOz82U"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      },
      "Export": {
        "Name": "sls-cloud-project-dev-AddPermissionLambdaFunctionQualifiedArn"
      }
    },
<<<<<<< HEAD
    "RenameFolderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RenameFolderLambdaVersionawUHGjaWxVFPqHIPGuTHZUptq3sJv3A6J3Apq8ARM"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-RenameFolderLambdaFunctionQualifiedArn"
      }
    },
    "UploadFolderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadFolderLambdaVersionHhMPiVPzmZEvnUgWBlq0U1f8wB9poXlAhMNk5VKg"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-UploadFolderLambdaFunctionQualifiedArn"
      }
    },
    "RemoveFileLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemoveFileLambdaVersionuRlRU1DeWRBeF4pc4kEKDyJwic5YJyzdYAvfkDN5Cc"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-RemoveFileLambdaFunctionQualifiedArn"
      }
    },
    "RemoveFolderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemoveFolderLambdaVersionOURq3upzw6KDAYBY3UnlrZ3OQSo3s0fsT65rY2E0Q"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-RemoveFolderLambdaFunctionQualifiedArn"
      }
    },
    "MoveFileLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MoveFileLambdaVersion1S8PbrrACaiDTjJHKY6FKL99Vdn1xLeKFOybW61tI"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-MoveFileLambdaFunctionQualifiedArn"
=======
    "UploadFileLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadFileLambdaVersionjwQxNRunzLItXe2IUaLjJ6LS0BcfYi0YyjUZvNbmg"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-UploadFileLambdaFunctionQualifiedArn"
>>>>>>> e28cda63f20505f0df5c63e94acf5faed5ecf675
      }
    },
    "RemovePermissionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemovePermissionLambdaVersionoaSPq1UiTzp8cMVXhaq8n6G4DgiGtVyiRghelxKxAc"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-RemovePermissionLambdaFunctionQualifiedArn"
      }
    },
    "SaveRequestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SaveRequestLambdaVersionSduJ9H4CPZYknhyGDpNrKIObOCFp8mQH5GHfwJ5u4"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-SaveRequestLambdaFunctionQualifiedArn"
      }
    },
    "GetPermissionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetPermissionLambdaVersionXtlQSdt6LYdqPhz6aWRSqzjaT2L71KVUoU51lK92Ug"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-GetPermissionLambdaFunctionQualifiedArn"
      }
    },
    "RemoveRequestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemoveRequestLambdaVersionhYugnSQCLu4R0BxHGIq6j8UP562Dr4KdaTTW6HGCgM"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-RemoveRequestLambdaFunctionQualifiedArn"
      }
    },
    "GetRequestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetRequestLambdaVersion5w3lZFK0R0jxB4WadMiKd4qgNJSCtc2xjdqrZaORIOI"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-GetRequestLambdaFunctionQualifiedArn"
      }
    },
    "SendInviteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SendInviteLambdaVersionsbk7QZhAmtZQ7GfmltOyqU0MY7cOjDc2PIGYSTMVdCE"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-SendInviteLambdaFunctionQualifiedArn"
      }
    },
    "AcceptRequestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AcceptRequestLambdaVersionYH5l6Vu20q6EIwKuT3KuLs8lQPUvjgIhhascgNgk2QU"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-AcceptRequestLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-cloud-project-dev-ServiceEndpoint"
      }
    }
  }
}