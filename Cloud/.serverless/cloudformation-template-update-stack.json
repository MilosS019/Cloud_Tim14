{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "SaveUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-saveUser"
      }
    },
    "GetUsersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-getUsers"
      }
    },
    "GetFoldersLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-getFolders"
      }
    },
    "GetFilesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-getFiles"
      }
    },
    "GetAllFilesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-getAllFiles"
      }
    },
    "DownloadFilesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-downloadFiles"
      }
    },
    "GetMetaDataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-getMetaData"
      }
    },
    "DownloadSharedLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-downloadShared"
      }
    },
    "GetSharedMetaDataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-getSharedMetaData"
      }
    },
    "AddPermissionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-addPermission"
      }
    },
    "SendNotificationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-sendNotification"
      }
    },
    "UploadMetaDataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-uploadMetaData"
      }
    },
    "RenameMetaDataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-renameMetaData"
      }
    },
    "UpdateMetaDataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-updateMetaData"
      }
    },
    "UploadFileLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-uploadFile"
      }
    },
    "UploadFolderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-uploadFolder"
      }
    },
    "RenameFolderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-renameFolder"
      }
    },
    "MoveFileLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-moveFile"
      }
    },
    "RemoveFileLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-removeFile"
      }
    },
    "RemoveFolderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-removeFolder"
      }
    },
    "GetSharedFilesLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-getSharedFiles"
      }
    },
    "RemovePermissionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-removePermission"
      }
    },
    "GetPermissionLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-getPermission"
      }
    },
    "SaveRequestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-saveRequest"
      }
    },
    "RemoveRequestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-removeRequest"
      }
    },
    "GetRequestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-getRequest"
      }
    },
    "SendInviteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-sendInvite"
      }
    },
    "AcceptRequestLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-acceptRequest"
      }
    },
    "GetEmailLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-getEmail"
      }
    },
    "TestiramoStepLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-testiramoStep"
      }
    },
    "TestiramoStep2LogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-testiramoStep2"
      }
    },
    "UndoUploadLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-undoUpload"
      }
    },
    "UndoMovingLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-undoMoving"
      }
    },
    "SendToSqsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-sendToSqs"
      }
    },
    "UpdateSharedMetaDataLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/cloud-project-dev-updateSharedMetaData"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "cloud-project",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cloud-project-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cloud-project-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:SendEmail",
                    "ses:SendRawEmail"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cognito-idp:AdminCreateUser",
                    "cognito-idp:AdminUpdateUserAttributes",
                    "cognito-idp:AdminSetUserPassword"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:VerifyEmailIdentity"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:ListVerifiedEmailAddresses"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "userTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "FilePermissionsTable",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "DynamoDbMetaData",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "registrationRequestTable2",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:SendMessage",
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:PurgeQueue",
                    "sqs:CreateQueue",
                    "sqs:DeleteQueue",
                    "sqs:GetQueueUrl"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "notificationQueue",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket",
                    "s3:GetObject",
                    "s3:GetObjectAcl",
                    "s3:PutObject",
                    "s3:PutObjectAcl",
                    "s3:DeleteObject"
                  ],
                  "Resource": [
                    "arn:aws:s3:::tim7-project-files-bucket",
                    "arn:aws:s3:::tim7-project-files-bucket/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    "arn:aws:sqs:eu-central-1:841941972097:notificationQueue"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "cloud-project",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "SaveUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/saveUser.zip"
        },
        "Handler": "saveUser/save_user.save",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-saveUser",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SaveUserLogGroup"
      ]
    },
    "GetUsersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/getUsers.zip"
        },
        "Handler": "getUsers/get_users.get_all_users",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-getUsers",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetUsersLogGroup"
      ]
    },
    "GetFoldersLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/getFolders.zip"
        },
        "Handler": "getFolders/get_folders.get_all_folders",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-getFolders",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetFoldersLogGroup"
      ]
    },
    "GetFilesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/getFiles.zip"
        },
        "Handler": "getFiles/get_files.get_files",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-getFiles",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetFilesLogGroup"
      ]
    },
    "GetAllFilesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/getAllFiles.zip"
        },
        "Handler": "getAllFiles/get_all_files.get_all_files",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-getAllFiles",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllFilesLogGroup"
      ]
    },
    "DownloadFilesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/downloadFiles.zip"
        },
        "Handler": "fileDownload/download_file.download_file",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-downloadFiles",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DownloadFilesLogGroup"
      ]
    },
    "GetMetaDataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/getMetaData.zip"
        },
        "Handler": "getMetaData/get_metadata.get_metadata",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-getMetaData",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetMetaDataLogGroup"
      ]
    },
    "DownloadSharedLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/downloadShared.zip"
        },
        "Handler": "downloadShared/download_shared.download_shared",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-downloadShared",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "DownloadSharedLogGroup"
      ]
    },
    "GetSharedMetaDataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/getSharedMetaData.zip"
        },
        "Handler": "getSharedMetaData/get_shared_metadata.get_shared_metadata",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-getSharedMetaData",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetSharedMetaDataLogGroup"
      ]
    },
    "AddPermissionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/addPermission.zip"
        },
        "Handler": "addPermission/add_permission.add_permission",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-addPermission",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddPermissionLogGroup"
      ]
    },
    "SendNotificationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/sendNotification.zip"
        },
        "Handler": "sendNotification/send_notification.send_notification",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-sendNotification",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SendNotificationLogGroup"
      ]
    },
    "UploadMetaDataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/uploadMetaData.zip"
        },
        "Handler": "metaDataUpload/upload_meta_data.upload_file",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-uploadMetaData",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UploadMetaDataLogGroup"
      ]
    },
    "RenameMetaDataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/renameMetaData.zip"
        },
        "Handler": "renameMetaData/rename_metadata.rename_metadata",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-renameMetaData",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RenameMetaDataLogGroup"
      ]
    },
    "UpdateMetaDataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/updateMetaData.zip"
        },
        "Handler": "updateMetaData/update_metadata.update_metadata",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-updateMetaData",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateMetaDataLogGroup"
      ]
    },
    "UploadFileLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/uploadFile.zip"
        },
        "Handler": "fileUpload/upload_file.upload_file",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-uploadFile",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UploadFileLogGroup"
      ]
    },
    "UploadFolderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/uploadFolder.zip"
        },
        "Handler": "uploadFolder/upload_folder.upload_folder",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-uploadFolder",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UploadFolderLogGroup"
      ]
    },
    "RenameFolderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/renameFolder.zip"
        },
        "Handler": "renameFolder/rename_folder.rename_folder",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-renameFolder",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RenameFolderLogGroup"
      ]
    },
    "MoveFileLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/moveFile.zip"
        },
        "Handler": "moveFile/move_file.move_file",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-moveFile",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "MoveFileLogGroup"
      ]
    },
    "RemoveFileLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/removeFile.zip"
        },
        "Handler": "removeFile/remove_file.remove_file",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-removeFile",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RemoveFileLogGroup"
      ]
    },
    "RemoveFolderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/removeFolder.zip"
        },
        "Handler": "removeFolder/remove_folder.remove_folder",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-removeFolder",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RemoveFolderLogGroup"
      ]
    },
    "GetSharedFilesLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/getSharedFiles.zip"
        },
        "Handler": "getSharedFiles/get_shared_files.get_shared_files",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-getSharedFiles",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetSharedFilesLogGroup"
      ]
    },
    "RemovePermissionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/removePermission.zip"
        },
        "Handler": "removeViewPermission/remove_view_permission.remove_permission",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-removePermission",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RemovePermissionLogGroup"
      ]
    },
    "GetPermissionLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/getPermission.zip"
        },
        "Handler": "getViewPermission/get_view_permission.get_permissions",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-getPermission",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetPermissionLogGroup"
      ]
    },
    "SaveRequestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/saveRequest.zip"
        },
        "Handler": "saveRegistrationRequest/save_registration_request.save_request",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-saveRequest",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SaveRequestLogGroup"
      ]
    },
    "RemoveRequestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/removeRequest.zip"
        },
        "Handler": "removeRegistrationRequest/remove_registration_request.remove_request",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-removeRequest",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RemoveRequestLogGroup"
      ]
    },
    "GetRequestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/getRequest.zip"
        },
        "Handler": "getRegistrationRequests/get_registration_requests.get_requests",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-getRequest",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetRequestLogGroup"
      ]
    },
    "SendInviteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/sendInvite.zip"
        },
        "Handler": "sendInvite/send_invite.send_invite",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-sendInvite",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SendInviteLogGroup"
      ]
    },
    "AcceptRequestLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/acceptRequest.zip"
        },
        "Handler": "acceptRegistrationRequest/accept_registration_request.accept_request",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-acceptRequest",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AcceptRequestLogGroup"
      ]
    },
    "GetEmailLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/getEmail.zip"
        },
        "Handler": "getEmail/get_email.get_email",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-getEmail",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetEmailLogGroup"
      ]
    },
    "TestiramoStepLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/testiramoStep.zip"
        },
        "Handler": "testiramoStep/testiramo_step.testiramo_step",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-testiramoStep",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TestiramoStepLogGroup"
      ]
    },
    "TestiramoStep2LambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/testiramoStep2.zip"
        },
        "Handler": "testiramoStep2/testiramo_step2.testiramo_step2",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-testiramoStep2",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TestiramoStep2LogGroup"
      ]
    },
    "UndoUploadLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/undoUpload.zip"
        },
        "Handler": "undoUpload/undo_upload.undo_upload",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-undoUpload",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UndoUploadLogGroup"
      ]
    },
    "UndoMovingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/undoMoving.zip"
        },
        "Handler": "undoMoving/undo_moving.undo_moving",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-undoMoving",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UndoMovingLogGroup"
      ]
    },
    "SendToSqsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/sendToSqs.zip"
        },
        "Handler": "sendToSqs/send_to_sqs.send_to_sqs",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-sendToSqs",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SendToSqsLogGroup"
      ]
    },
    "UpdateSharedMetaDataLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/cloud-project/dev/1687910308229-2023-06-27T23:58:28.229Z/updateSharedMetaData.zip"
        },
        "Handler": "updateSharedMetaData/update_shared_meta_data.update_shared_meta_data",
        "Runtime": "python3.7",
        "FunctionName": "cloud-project-dev-updateSharedMetaData",
        "MemorySize": 128,
        "Timeout": 10,
        "Environment": {
          "Variables": {
            "USER_TABLE": {
              "Ref": "userTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateSharedMetaDataLogGroup"
      ]
    },
    "SaveUserLambdaVersionzJWmEOnGlRZ1t6FF9sZowmXbcJNhzhByayMfUJYGI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SaveUserLambdaFunction"
        },
        "CodeSha256": "1O6xvNdgpGsllSZaZHleFfUfVqCYMY+x28YjfAbsfDg="
      }
    },
    "GetUsersLambdaVersionNX01fTQR7G87nzPTDBNRTszwjo6PkcSzZdblr3TBiw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUsersLambdaFunction"
        },
        "CodeSha256": "q2poWSee4MBAqMpB02D41Uqk0y7SkMlO3c2K0YXVDqM="
      }
    },
    "GetAllFilesLambdaVersionRAGl2tSsc7BEVSSwrzWJnrg9elqY3gWvfVUMQx7NnA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllFilesLambdaFunction"
        },
        "CodeSha256": "cWO+ni9OUmmqnHBl/xzTNQouy6TAIN/4w8rlUkWMBUk="
      }
    },
    "GetMetaDataLambdaVersionURzSDP7dYDl2mMGqoX3PN2Ftt4KOjk7KkU6dvo8ybU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetMetaDataLambdaFunction"
        },
        "CodeSha256": "Yc7c2z6N5IbKJhqgc+s0YCBws2Lbsl8yYYfDzPg6dpw="
      }
    },
    "DownloadFilesLambdaVersionEmKw1RXYkn6VXHuxoi1GtUI6L3PwBV2ALOwKZZeCU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DownloadFilesLambdaFunction"
        },
        "CodeSha256": "GpG/7/mki+Jlqbg94176NCyX0y8DCl3TZpgUmQADe3U="
      }
    },
    "DownloadSharedLambdaVersionng18LXtEo3nlnydUyZTz8WgctbT5izvrl8I2QM2XE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "DownloadSharedLambdaFunction"
        },
        "CodeSha256": "BJ0mzyX83gDakwflyEGkBnLmEWbgzeN21ekQKBdfA8E="
      }
    },
    "GetSharedMetaDataLambdaVersionvo0MrAksNwXoHTSM9EwdYTqp1eL0XMYzyoBAxc7ffA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetSharedMetaDataLambdaFunction"
        },
        "CodeSha256": "bIKhxPzTqy/BLZcGim1RB+Ate5Ic70j5qZ6e05TB6jc="
      }
    },
    "GetFilesLambdaVersionS1KqukYM1mkQQkJ1V7KNQcHuLDFrryaOAKw8zQ4MA0M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetFilesLambdaFunction"
        },
        "CodeSha256": "fx9STLqNJJIQS22USh6dk3fTTyZX8mzoylANj20523Y="
      }
    },
    "SendNotificationLambdaVersionjpRIwX8TBGlQektgHzVIg2uxrshuuzLIfvnf4I": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SendNotificationLambdaFunction"
        },
        "CodeSha256": "zzbK5Fwg0weYzlpSk4WxyPQk38vPeYzpUapO75TFivM="
      }
    },
    "UploadMetaDataLambdaVersionHWRVKdELzMm2NKf9AXm1WzwFsllDgqvTo95wrhLJdZI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadMetaDataLambdaFunction"
        },
        "CodeSha256": "OTg90zatLvwEAfvI959yRB6UZwDjn4jegMXAypgX6dA="
      }
    },
    "RenameMetaDataLambdaVersion7Jqsmz4Vc20w6ZSHqZLgOCwR2z6M4i97rjrPTgI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RenameMetaDataLambdaFunction"
        },
        "CodeSha256": "mbOgH4QZ7Jz0ly3WvnS/fO6r4SrUSf83Gvv+Na3P6Ak="
      }
    },
    "UpdateMetaDataLambdaVersion3OIN1UySgz17Ucay4NPI0SAEqgRH5cUa89BKe48M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateMetaDataLambdaFunction"
        },
        "CodeSha256": "Cb3nj3ZGcFhNEHGHlP7LNgoFu0IyR92s2ltmY1nqDHA="
      }
    },
    "GetFoldersLambdaVersionlodY16MrooiViPZrrX4m0oN0MKWyzMh4Tvw9iIRTOVI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetFoldersLambdaFunction"
        },
        "CodeSha256": "l5vPj2piamff7aWcYQUltLGtjEtlSZPujQtYvHAdNsw="
      }
    },
    "AddPermissionLambdaVersionKkgIw82gO2qcsm2uCkrOs8RqR57FJSpeXtJcb8Mo5g4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddPermissionLambdaFunction"
        },
        "CodeSha256": "tvoiNNeNlDO25DsGeWyEt7ZoRSiIo2PFJ7ETklUF2+s="
      }
    },
    "UploadFolderLambdaVersiongHpgtDTRH82KsXcS9a8WGb0WHpebPbVuXxyQdK5Sxg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadFolderLambdaFunction"
        },
        "CodeSha256": "u1KwIzpdRVw3N+XsYHwEcK3TVfDa/jwvyhXFaFyZDHg="
      }
    },
    "UploadFileLambdaVersionqALDtiSHgmoGpLnsPC3fOhzAByW26rqp29yQDGtTr8M": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UploadFileLambdaFunction"
        },
        "CodeSha256": "klUuhbMZcGG+yK1nm9Q/dw5ooudXUbZtti3IRF4j5Ew="
      }
    },
    "RemoveFolderLambdaVersionGMykPxQW4fYCdzLusxVllRYe9Jrgc4WmD09Gup5kXw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemoveFolderLambdaFunction"
        },
        "CodeSha256": "3DOzpFOj/l1S4XNvrCVBmm0OMpYX4V6+QjDMy51mk/s="
      }
    },
    "RenameFolderLambdaVersionl5BaXQ9op6dHd1z56Dboq3lsCUrEEqe2ABCkL0KLI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RenameFolderLambdaFunction"
        },
        "CodeSha256": "35QgJUidOYzschbbRkA+g5Uf3fat3+R/DtmX32lYdI0="
      }
    },
    "RemoveFileLambdaVersion2aMVNEmVDakBdvDiM4j1wwBO9lpIhTVmpgxMLA73d9Q": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemoveFileLambdaFunction"
        },
        "CodeSha256": "vtAy3Y7/lyt+kU/VQ5GHOGrItUbJb15N1izg/8DOxkY="
      }
    },
    "GetSharedFilesLambdaVersionO5CBF2cJXnzd11ADWXyOtFVH0uJZ5WxOSyAGVejEM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetSharedFilesLambdaFunction"
        },
        "CodeSha256": "TsOd8qD1Ycp2WtxiUHda2Z5jvijzkrPP+qfow4WXgUo="
      }
    },
    "RemovePermissionLambdaVersion09mmwMOmgbPFVQZliDXHa3KTTaEsVJfEfetEgY0NXAI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemovePermissionLambdaFunction"
        },
        "CodeSha256": "fAWqUr1wbKdwJ+EUfWdQtR3OrGJTVbyLi1PgaLGNHAo="
      }
    },
    "SaveRequestLambdaVersion2d0bKIj6GvJf8amjBo34QrzH85tXlTHWuca6XG1GhHE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SaveRequestLambdaFunction"
        },
        "CodeSha256": "felISCgwos3LTHjhsx9yA+HeualRWtF4LwlebOrwkNY="
      }
    },
    "MoveFileLambdaVersionYkYNzKB4crnL6VjpDRa68G6UA4SEaAAkg0eoh3I": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "MoveFileLambdaFunction"
        },
        "CodeSha256": "wfvogH9q1c8jxcUP7SV4qnoQYcsmNsVoJmstg/7TXto="
      }
    },
    "AcceptRequestLambdaVersioneW6h8SVZCKCGPFB3Xi14kIrUTwjR9FPflCC5jbE9V4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AcceptRequestLambdaFunction"
        },
        "CodeSha256": "NzOEXcPohSGwHmCJ0DccSbhldQCDNHSh89JMhB9IUJQ="
      }
    },
    "SendInviteLambdaVersion5Fw8dr0U2vFcDmcm7870SdQ2EaKd0bJKP44cFwfd0Hc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SendInviteLambdaFunction"
        },
        "CodeSha256": "px6DVmoy4sLpyd6udR0wKbh7hAMn0MATdODZz93XXnA="
      }
    },
    "GetRequestLambdaVersionalmPny605IWMpmF9oS9oiZI9RHKkpJI3fmr6nk4wNY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetRequestLambdaFunction"
        },
        "CodeSha256": "869zOuwI8KlgpMI8fi3wbY7loA5JZLV6tizWxp4wm2Y="
      }
    },
    "GetPermissionLambdaVersionGlGMNdWtH70Kps9ik3D98q5m8Bp1XDMsAvTwsxn60": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetPermissionLambdaFunction"
        },
        "CodeSha256": "z/+HZnbWI1cGJ+BNT3NuVGaV353j5TjBtgS1yCkZtUc="
      }
    },
    "GetEmailLambdaVersiongQvRW4UNvD7zaALSaScoMuGrgKo9BlLKu04KuylxQ4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetEmailLambdaFunction"
        },
        "CodeSha256": "8KZR/ODTrQi/C1FZFUWKfzLOBSb4vIXX5fKENEE5W9Q="
      }
    },
    "RemoveRequestLambdaVersionDwRG5MEvacFfuYcvoU3YQxrB9JA7bJXXLuKlp9mdyA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RemoveRequestLambdaFunction"
        },
        "CodeSha256": "kAOUuTipDLx1wlB8Rya5rzS3g8X2S0fJsDmaJrzNWEc="
      }
    },
    "TestiramoStepLambdaVersionPTB3DYPG1t18qw4AcUaUu369Dt12LLezMhVIGPHApBg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TestiramoStepLambdaFunction"
        },
        "CodeSha256": "E5xgzc5nY1i9V26y9wsFQ5I23GNJvP8d2TwURZxiO+U="
      }
    },
    "TestiramoStep2LambdaVersionLZQl0nHG18vy8636ZfCgJ045WeRLGe7Pnw9GKMlSgk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TestiramoStep2LambdaFunction"
        },
        "CodeSha256": "ZnD7J1P/sHv0q0jUO3uvvSwMBOR8Q6Z/Jj9/RLm8HpM="
      }
    },
    "UndoUploadLambdaVersionLftDYO1ri1KvMg1zi80gU6GajIrFsqOlTrQBcNAuKg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UndoUploadLambdaFunction"
        },
        "CodeSha256": "xBSems8q5SFZUgCgauIjX6pGGWc/uWcyYYjSn9kJcZ8="
      }
    },
    "SendToSqsLambdaVersionkil8oiUeXSxykpUky97WOq3UOISBpIDFLiYehZFk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SendToSqsLambdaFunction"
        },
        "CodeSha256": "ZFJ2k90ffCchtveuzhoJI7vAs7n0euisyKTRNiw0WYo="
      }
    },
    "UpdateSharedMetaDataLambdaVersionYW0aCkEdNPGj9fMqOD5FlYDrIfCSicr33VKOj4HS1I": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateSharedMetaDataLambdaFunction"
        },
        "CodeSha256": "8zLt+f6xFt48ECTGf78nKmLTMlPS0yN0NBMsG7pKfoA="
      }
    },
    "UndoMovingLambdaVersion60waATZ30JP5gvACGcUyR6khGfwoWV21zW6HB7hpUY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UndoMovingLambdaFunction"
        },
        "CodeSha256": "rLiDArALyDlAexi8iunXDbAzlP0gS2Ae5FVvhGrhbGU="
      }
    },
    "FileUploadStateMachineStepFunctionsStateMachineRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "dev-cloud-project-statemachine",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UploadFileLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "UploadFileLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "UploadMetaDataLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "UploadMetaDataLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "SendToSqsLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "SendToSqsLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "UndoUploadLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "UndoUploadLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "FileRenameStateMachineStepFunctionsStateMachineRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "dev-cloud-project-statemachine",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "MoveFileLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "MoveFileLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "RenameMetaDataLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "RenameMetaDataLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "UpdateSharedMetaDataLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "UpdateSharedMetaDataLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "SendToSqsLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "SendToSqsLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "UndoMovingLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "UndoMovingLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "TestnaStateMasinaStepFunctionsStateMachineRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                }
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "dev-cloud-project-statemachine",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "UploadFileLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "UploadFileLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "UploadMetaDataLambdaFunction",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "${functionArn}:*",
                        {
                          "functionArn": {
                            "Fn::GetAtt": [
                              "UploadMetaDataLambdaFunction",
                              "Arn"
                            ]
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "FileUploadStateMachineStepFunctionsStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Sub": [
            "{\n  \"StartAt\": \"uploadFile\",\n  \"States\": {\n    \"uploadFile\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${ae1b6bf551bb08e6d73b5e6ccd81a809}\",\n      \"Next\": \"uploadMetaData\"\n    },\n    \"uploadMetaData\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${af2f906013cf1145a224d614f405b05c}\",\n      \"Catch\": [\n        {\n          \"ErrorEquals\": [\n            \"States.ALL\"\n          ],\n          \"Next\": \"undoUpload\"\n        }\n      ],\n      \"Next\": \"sendToSqs\"\n    },\n    \"sendToSqs\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${61c4c3d2f891cef4bbf3f25f77ce9b8c}\",\n      \"End\": true\n    },\n    \"undoUpload\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${4008ef9cbce5d188f278903292f2eec3}\",\n      \"ResultPath\": \"$.undoUploadResult\",\n      \"End\": true\n    }\n  }\n}",
            {
              "ae1b6bf551bb08e6d73b5e6ccd81a809": {
                "Fn::GetAtt": [
                  "UploadFileLambdaFunction",
                  "Arn"
                ]
              },
              "af2f906013cf1145a224d614f405b05c": {
                "Fn::GetAtt": [
                  "UploadMetaDataLambdaFunction",
                  "Arn"
                ]
              },
              "61c4c3d2f891cef4bbf3f25f77ce9b8c": {
                "Fn::GetAtt": [
                  "SendToSqsLambdaFunction",
                  "Arn"
                ]
              },
              "4008ef9cbce5d188f278903292f2eec3": {
                "Fn::GetAtt": [
                  "UndoUploadLambdaFunction",
                  "Arn"
                ]
              }
            }
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "FileUploadStateMachineStepFunctionsStateMachineRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FileUploadStateMachineStepFunctionsStateMachineRole"
      ]
    },
    "FileRenameStateMachineStepFunctionsStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Sub": [
            "{\n  \"StartAt\": \"moveFile\",\n  \"States\": {\n    \"moveFile\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${022021a1f7f0614def4ed900cd1bed50}\",\n      \"Next\": \"renameMetaData\"\n    },\n    \"renameMetaData\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${7d4e542f016f8a0f2e1c27a73335d3c2}\",\n      \"Catch\": [\n        {\n          \"ErrorEquals\": [\n            \"States.ALL\"\n          ],\n          \"Next\": \"undoMoving\"\n        }\n      ],\n      \"Next\": \"updateSharedMetaData\"\n    },\n    \"updateSharedMetaData\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${f0918c8e36ad0fec755c5e544d15cf29}\",\n      \"Next\": \"sendToSqs\"\n    },\n    \"sendToSqs\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${61c4c3d2f891cef4bbf3f25f77ce9b8c}\",\n      \"End\": true\n    },\n    \"undoMoving\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${163b4bf67870202fa552e0211f1d5bdb}\",\n      \"ResultPath\": \"$.undoUploadResult\",\n      \"OutputPath\": \"$.Payload\",\n      \"End\": true\n    }\n  }\n}",
            {
              "022021a1f7f0614def4ed900cd1bed50": {
                "Fn::GetAtt": [
                  "MoveFileLambdaFunction",
                  "Arn"
                ]
              },
              "7d4e542f016f8a0f2e1c27a73335d3c2": {
                "Fn::GetAtt": [
                  "RenameMetaDataLambdaFunction",
                  "Arn"
                ]
              },
              "f0918c8e36ad0fec755c5e544d15cf29": {
                "Fn::GetAtt": [
                  "UpdateSharedMetaDataLambdaFunction",
                  "Arn"
                ]
              },
              "61c4c3d2f891cef4bbf3f25f77ce9b8c": {
                "Fn::GetAtt": [
                  "SendToSqsLambdaFunction",
                  "Arn"
                ]
              },
              "163b4bf67870202fa552e0211f1d5bdb": {
                "Fn::GetAtt": [
                  "UndoMovingLambdaFunction",
                  "Arn"
                ]
              }
            }
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "FileRenameStateMachineStepFunctionsStateMachineRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "FileRenameStateMachineStepFunctionsStateMachineRole"
      ]
    },
    "TestnaStateMasinaStepFunctionsStateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "DefinitionString": {
          "Fn::Sub": [
            "{\n  \"StartAt\": \"uploadFile\",\n  \"States\": {\n    \"uploadFile\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${ae1b6bf551bb08e6d73b5e6ccd81a809}\",\n      \"Next\": \"uploadMetaData\"\n    },\n    \"uploadMetaData\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${af2f906013cf1145a224d614f405b05c}\",\n      \"End\": true\n    }\n  }\n}",
            {
              "ae1b6bf551bb08e6d73b5e6ccd81a809": {
                "Fn::GetAtt": [
                  "UploadFileLambdaFunction",
                  "Arn"
                ]
              },
              "af2f906013cf1145a224d614f405b05c": {
                "Fn::GetAtt": [
                  "UploadMetaDataLambdaFunction",
                  "Arn"
                ]
              }
            }
          ]
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "TestnaStateMasinaStepFunctionsStateMachineRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TestnaStateMasinaStepFunctionsStateMachineRole"
      ]
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-cloud-project",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceSave": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "save",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSaveUsers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceSave"
        },
        "PathPart": "users",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSaveRegistrationDashrequest": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceSave"
        },
        "PathPart": "registration-request",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUsers": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "users",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFolders": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "folders",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFiles": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "files",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAllDashfiles": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "all-files",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDownload": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "download",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMetadata": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "metadata",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceDownloadDashshared": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "download-shared",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSharedDashmetadata": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "shared-metadata",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFileDashpermission": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "file-permission",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUpdateDashmetadata": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "update-metadata",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUploadDashfolder": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "upload-folder",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceRenameDashfolder": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "rename-folder",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceRemoveDashfile": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "remove-file",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceRemoveDashfolder": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "remove-folder",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGetDashsharedDashfiles": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "get-shared-files",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceRegistrationDashrequest": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "registration-request",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSendDashinvite": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "send-invite",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAcceptDashregistrationDashrequest": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "accept-registration-request",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceGetDashemail": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "get-email",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSaveUsersOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSaveUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUsersOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodFoldersOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceFolders"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodFilesOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceFiles"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAllDashfilesOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAllDashfiles"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodDownloadOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceDownload"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodMetadataOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceMetadata"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodDownloadDashsharedOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceDownloadDashshared"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSharedDashmetadataOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSharedDashmetadata"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodFileDashpermissionOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,DELETE,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceFileDashpermission"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUpdateDashmetadataOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUpdateDashmetadata"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUploadDashfolderOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUploadDashfolder"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodRenameDashfolderOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceRenameDashfolder"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodRemoveDashfileOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceRemoveDashfile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodRemoveDashfolderOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceRemoveDashfolder"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGetDashsharedDashfilesOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetDashsharedDashfiles"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSaveRegistrationDashrequestOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSaveRegistrationDashrequest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodRegistrationDashrequestOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,DELETE'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceRegistrationDashrequest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSendDashinviteOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceSendDashinvite"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAcceptDashregistrationDashrequestOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAcceptDashregistrationDashrequest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodGetDashemailOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetDashemail"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodSaveUsersPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSaveUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SaveUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SaveUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUsersGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUsers"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUsersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetUsersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFoldersGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFolders"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetFoldersLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetFoldersLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFilesPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFiles"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetFilesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetFilesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAllDashfilesPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAllDashfiles"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAllFilesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetAllFilesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodDownloadPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceDownload"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DownloadFilesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DownloadFilesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMetadataPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMetadata"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetMetaDataLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetMetaDataLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodDownloadDashsharedPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceDownloadDashshared"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "DownloadSharedLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "DownloadSharedLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSharedDashmetadataPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSharedDashmetadata"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetSharedMetaDataLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetSharedMetaDataLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFileDashpermissionPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFileDashpermission"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddPermissionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AddPermissionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUpdateDashmetadataPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUpdateDashmetadata"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateMetaDataLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UpdateMetaDataLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUploadDashfolderPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUploadDashfolder"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UploadFolderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "UploadFolderLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodRenameDashfolderPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRenameDashfolder"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RenameFolderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RenameFolderLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodRemoveDashfilePut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRemoveDashfile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemoveFileLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RemoveFileLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodRemoveDashfolderPut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRemoveDashfolder"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemoveFolderLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RemoveFolderLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodGetDashsharedDashfilesGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetDashsharedDashfiles"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetSharedFilesLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetSharedFilesLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFileDashpermissionDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFileDashpermission"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemovePermissionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RemovePermissionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFileDashpermissionGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFileDashpermission"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetPermissionLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetPermissionLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSaveRegistrationDashrequestPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSaveRegistrationDashrequest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SaveRequestLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SaveRequestLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodRegistrationDashrequestDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRegistrationDashrequest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RemoveRequestLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RemoveRequestLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodRegistrationDashrequestGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceRegistrationDashrequest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetRequestLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetRequestLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSendDashinvitePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSendDashinvite"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SendInviteLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SendInviteLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAcceptDashregistrationDashrequestPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAcceptDashregistrationDashrequest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AcceptRequestLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AcceptRequestLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodGetDashemailGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceGetDashemail"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "COGNITO_USER_POOLS",
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetEmailLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetEmailLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1687910304561": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodSaveUsersOptions",
        "ApiGatewayMethodUsersOptions",
        "ApiGatewayMethodFoldersOptions",
        "ApiGatewayMethodFilesOptions",
        "ApiGatewayMethodAllDashfilesOptions",
        "ApiGatewayMethodDownloadOptions",
        "ApiGatewayMethodMetadataOptions",
        "ApiGatewayMethodDownloadDashsharedOptions",
        "ApiGatewayMethodSharedDashmetadataOptions",
        "ApiGatewayMethodFileDashpermissionOptions",
        "ApiGatewayMethodUpdateDashmetadataOptions",
        "ApiGatewayMethodUploadDashfolderOptions",
        "ApiGatewayMethodRenameDashfolderOptions",
        "ApiGatewayMethodRemoveDashfileOptions",
        "ApiGatewayMethodRemoveDashfolderOptions",
        "ApiGatewayMethodGetDashsharedDashfilesOptions",
        "ApiGatewayMethodSaveRegistrationDashrequestOptions",
        "ApiGatewayMethodRegistrationDashrequestOptions",
        "ApiGatewayMethodSendDashinviteOptions",
        "ApiGatewayMethodAcceptDashregistrationDashrequestOptions",
        "ApiGatewayMethodGetDashemailOptions",
        "ApiGatewayMethodSaveUsersPost",
        "ApiGatewayMethodUsersGet",
        "ApiGatewayMethodFoldersGet",
        "ApiGatewayMethodFilesPut",
        "ApiGatewayMethodAllDashfilesPut",
        "ApiGatewayMethodDownloadPut",
        "ApiGatewayMethodMetadataPut",
        "ApiGatewayMethodDownloadDashsharedPut",
        "ApiGatewayMethodSharedDashmetadataPut",
        "ApiGatewayMethodFileDashpermissionPost",
        "ApiGatewayMethodUpdateDashmetadataPut",
        "ApiGatewayMethodUploadDashfolderPost",
        "ApiGatewayMethodRenameDashfolderPost",
        "ApiGatewayMethodRemoveDashfilePut",
        "ApiGatewayMethodRemoveDashfolderPut",
        "ApiGatewayMethodGetDashsharedDashfilesGet",
        "ApiGatewayMethodFileDashpermissionDelete",
        "ApiGatewayMethodFileDashpermissionGet",
        "ApiGatewayMethodSaveRegistrationDashrequestPost",
        "ApiGatewayMethodRegistrationDashrequestDelete",
        "ApiGatewayMethodRegistrationDashrequestGet",
        "ApiGatewayMethodSendDashinvitePost",
        "ApiGatewayMethodAcceptDashregistrationDashrequestPost",
        "ApiGatewayMethodGetDashemailGet",
        "ApiGatewayMethodUploadDashfilePost",
        "ApiGatewayMethodMoveDashfilePut",
        "ApiGatewayMethodStepDashtestPost"
      ]
    },
    "SaveUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SaveUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUsersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUsersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetFoldersLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetFoldersLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetFilesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetFilesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetAllFilesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllFilesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DownloadFilesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DownloadFilesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetMetaDataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetMetaDataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "DownloadSharedLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "DownloadSharedLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetSharedMetaDataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetSharedMetaDataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AddPermissionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddPermissionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateMetaDataLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateMetaDataLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UploadFolderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UploadFolderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RenameFolderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RenameFolderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemoveFileLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemoveFileLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemoveFolderLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemoveFolderLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetSharedFilesLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetSharedFilesLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemovePermissionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemovePermissionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetPermissionLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetPermissionLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SaveRequestLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SaveRequestLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RemoveRequestLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RemoveRequestLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetRequestLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetRequestLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SendInviteLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SendInviteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AcceptRequestLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AcceptRequestLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetEmailLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetEmailLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SendNotificationEventSourceMappingSQSNotificationQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": "arn:aws:sqs:eu-central-1:841941972097:notificationQueue",
        "FunctionName": {
          "Fn::GetAtt": [
            "SendNotificationLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "ApiGatewayResourceUploadDashfile": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "upload-file",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMoveDashfile": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "move-file",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceStepDashtest": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "step-test",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUploadDashfilePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "AuthorizationType": "COGNITO_USER_POOLS",
        "ApiKeyRequired": false,
        "ResourceId": {
          "Ref": "ApiGatewayResourceUploadDashfile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Credentials": {
            "Fn::GetAtt": [
              "ApigatewayToStepFunctionsRole",
              "Arn"
            ]
          },
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":states:action/StartExecution"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": [
                "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                {
                  "StateMachineArn": {
                    "Ref": "FileUploadStateMachineStepFunctionsStateMachine"
                  }
                }
              ]
            },
            "application/x-www-form-urlencoded": {
              "Fn::Sub": [
                "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                {
                  "StateMachineArn": {
                    "Ref": "FileUploadStateMachineStepFunctionsStateMachine"
                  }
                }
              ]
            }
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": 200,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": 400,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            },
            "ResponseModels": {},
            "StatusCode": 400
          }
        ],
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        }
      }
    },
    "ApiGatewayMethodMoveDashfilePut": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "PUT",
        "RequestParameters": {},
        "AuthorizationType": "COGNITO_USER_POOLS",
        "ApiKeyRequired": false,
        "ResourceId": {
          "Ref": "ApiGatewayResourceMoveDashfile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Credentials": {
            "Fn::GetAtt": [
              "ApigatewayToStepFunctionsRole",
              "Arn"
            ]
          },
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":states:action/StartExecution"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": [
                "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                {
                  "StateMachineArn": {
                    "Ref": "FileRenameStateMachineStepFunctionsStateMachine"
                  }
                }
              ]
            },
            "application/x-www-form-urlencoded": {
              "Fn::Sub": [
                "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                {
                  "StateMachineArn": {
                    "Ref": "FileRenameStateMachineStepFunctionsStateMachine"
                  }
                }
              ]
            }
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": 200,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": 400,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            },
            "ResponseModels": {},
            "StatusCode": 400
          }
        ],
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        }
      }
    },
    "ApiGatewayMethodStepDashtestPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "AuthorizationType": "COGNITO_USER_POOLS",
        "ApiKeyRequired": false,
        "ResourceId": {
          "Ref": "ApiGatewayResourceStepDashtest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS",
          "Credentials": {
            "Fn::GetAtt": [
              "ApigatewayToStepFunctionsRole",
              "Arn"
            ]
          },
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":states:action/StartExecution"
              ]
            ]
          },
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": {
              "Fn::Sub": [
                "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                {
                  "StateMachineArn": {
                    "Ref": "TestnaStateMasinaStepFunctionsStateMachine"
                  }
                }
              ]
            },
            "application/x-www-form-urlencoded": {
              "Fn::Sub": [
                "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                {
                  "StateMachineArn": {
                    "Ref": "TestnaStateMasinaStepFunctionsStateMachine"
                  }
                }
              ]
            }
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "SelectionPattern": 200,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            },
            {
              "StatusCode": 400,
              "SelectionPattern": 400,
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {}
            }
          ]
        },
        "MethodResponses": [
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            },
            "ResponseModels": {},
            "StatusCode": 200
          },
          {
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": "'*'"
            },
            "ResponseModels": {},
            "StatusCode": 400
          }
        ],
        "AuthorizerId": {
          "Ref": "MyApiGatewayAuthorizer"
        }
      }
    },
    "ApiGatewayMethodUploadDashfileOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceUploadDashfile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodMoveDashfileOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceMoveDashfile"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodStepDashtestOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Credentials": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                "method.response.header.Access-Control-Allow-Credentials": "'false'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceStepDashtest"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApigatewayToStepFunctionsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "apigateway.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "apigatewaytostepfunctions",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "states:StartExecution"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "notificationQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "notificationQueue",
        "VisibilityTimeout": 300,
        "DelaySeconds": 0,
        "MaximumMessageSize": 262144,
        "ReceiveMessageWaitTimeSeconds": 20
      }
    },
    "userTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "userTable",
        "AttributeDefinitions": [
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "email",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    },
    "registrationRequestTable2": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "registrationRequestTable2",
        "AttributeDefinitions": [
          {
            "AttributeName": "inviter_email",
            "AttributeType": "S"
          },
          {
            "AttributeName": "invited_user_email",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "inviter_email",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "invited_user_email",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    },
    "FilePermissionsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "file-permissions",
        "AttributeDefinitions": [
          {
            "AttributeName": "granted_user",
            "AttributeType": "S"
          },
          {
            "AttributeName": "file_path",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "granted_user",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "file_path",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    },
    "DynamoDbMetaData": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "meta-data",
        "AttributeDefinitions": [
          {
            "AttributeName": "emailAndName",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "emailAndName",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        }
      }
    },
    "S3BucketForFiles": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": "tim7-project-files-bucket",
        "AccessControl": "Private",
        "CorsConfiguration": {
          "CorsRules": [
            {
              "AllowedMethods": [
                "GET",
                "PUT",
                "POST",
                "DELETE"
              ],
              "AllowedOrigins": [
                "*"
              ]
            }
          ]
        }
      }
    },
    "MyUserPool": {
      "Type": "AWS::Cognito::UserPool",
      "Properties": {
        "UserPoolName": "my-user-poll",
        "UsernameAttributes": [
          "email"
        ],
        "AutoVerifiedAttributes": [
          "email"
        ],
        "MfaConfiguration": "OFF",
        "AccountRecoverySetting": {
          "RecoveryMechanisms": [
            {
              "Name": "verified_email",
              "Priority": 1
            }
          ]
        },
        "UserPoolTags": {
          "TagKey": "TagValue"
        }
      }
    },
    "MyUserPoolClient": {
      "Type": "AWS::Cognito::UserPoolClient",
      "Properties": {
        "UserPoolId": {
          "Ref": "MyUserPool"
        },
        "ClientName": "my-user-poll",
        "GenerateSecret": false
      }
    },
    "MyApiGatewayAuthorizer": {
      "Type": "AWS::ApiGateway::Authorizer",
      "Properties": {
        "AuthorizerResultTtlInSeconds": 10,
        "IdentitySource": "method.request.header.Authorization",
        "Name": "MyCognitoAuthorizer",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "Type": "COGNITO_USER_POOLS",
        "ProviderARNs": [
          {
            "Fn::Join": [
              "",
              [
                "arn:aws:cognito-idp:",
                {
                  "Ref": "AWS::Region"
                },
                ":",
                {
                  "Ref": "AWS::AccountId"
                },
                ":userpool/",
                {
                  "Ref": "MyUserPool"
                }
              ]
            ]
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-ServerlessDeploymentBucketName"
      }
    },
    "SaveUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SaveUserLambdaVersionzJWmEOnGlRZ1t6FF9sZowmXbcJNhzhByayMfUJYGI"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-SaveUserLambdaFunctionQualifiedArn"
      }
    },
    "GetUsersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUsersLambdaVersionNX01fTQR7G87nzPTDBNRTszwjo6PkcSzZdblr3TBiw"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-GetUsersLambdaFunctionQualifiedArn"
      }
    },
    "GetAllFilesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllFilesLambdaVersionRAGl2tSsc7BEVSSwrzWJnrg9elqY3gWvfVUMQx7NnA"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-GetAllFilesLambdaFunctionQualifiedArn"
      }
    },
    "GetMetaDataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetMetaDataLambdaVersionURzSDP7dYDl2mMGqoX3PN2Ftt4KOjk7KkU6dvo8ybU"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-GetMetaDataLambdaFunctionQualifiedArn"
      }
    },
    "DownloadFilesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DownloadFilesLambdaVersionEmKw1RXYkn6VXHuxoi1GtUI6L3PwBV2ALOwKZZeCU"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-DownloadFilesLambdaFunctionQualifiedArn"
      }
    },
    "DownloadSharedLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "DownloadSharedLambdaVersionng18LXtEo3nlnydUyZTz8WgctbT5izvrl8I2QM2XE"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-DownloadSharedLambdaFunctionQualifiedArn"
      }
    },
    "GetSharedMetaDataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetSharedMetaDataLambdaVersionvo0MrAksNwXoHTSM9EwdYTqp1eL0XMYzyoBAxc7ffA"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-GetSharedMetaDataLambdaFunctionQualifiedArn"
      }
    },
    "GetFilesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetFilesLambdaVersionS1KqukYM1mkQQkJ1V7KNQcHuLDFrryaOAKw8zQ4MA0M"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-GetFilesLambdaFunctionQualifiedArn"
      }
    },
    "SendNotificationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SendNotificationLambdaVersionjpRIwX8TBGlQektgHzVIg2uxrshuuzLIfvnf4I"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-SendNotificationLambdaFunctionQualifiedArn"
      }
    },
    "UploadMetaDataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadMetaDataLambdaVersionHWRVKdELzMm2NKf9AXm1WzwFsllDgqvTo95wrhLJdZI"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-UploadMetaDataLambdaFunctionQualifiedArn"
      }
    },
    "RenameMetaDataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RenameMetaDataLambdaVersion7Jqsmz4Vc20w6ZSHqZLgOCwR2z6M4i97rjrPTgI"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-RenameMetaDataLambdaFunctionQualifiedArn"
      }
    },
    "UpdateMetaDataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateMetaDataLambdaVersion3OIN1UySgz17Ucay4NPI0SAEqgRH5cUa89BKe48M"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-UpdateMetaDataLambdaFunctionQualifiedArn"
      }
    },
    "GetFoldersLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetFoldersLambdaVersionlodY16MrooiViPZrrX4m0oN0MKWyzMh4Tvw9iIRTOVI"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-GetFoldersLambdaFunctionQualifiedArn"
      }
    },
    "AddPermissionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddPermissionLambdaVersionKkgIw82gO2qcsm2uCkrOs8RqR57FJSpeXtJcb8Mo5g4"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-AddPermissionLambdaFunctionQualifiedArn"
      }
    },
    "UploadFolderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadFolderLambdaVersiongHpgtDTRH82KsXcS9a8WGb0WHpebPbVuXxyQdK5Sxg"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-UploadFolderLambdaFunctionQualifiedArn"
      }
    },
    "UploadFileLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UploadFileLambdaVersionqALDtiSHgmoGpLnsPC3fOhzAByW26rqp29yQDGtTr8M"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-UploadFileLambdaFunctionQualifiedArn"
      }
    },
    "RemoveFolderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemoveFolderLambdaVersionGMykPxQW4fYCdzLusxVllRYe9Jrgc4WmD09Gup5kXw"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-RemoveFolderLambdaFunctionQualifiedArn"
      }
    },
    "RenameFolderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RenameFolderLambdaVersionl5BaXQ9op6dHd1z56Dboq3lsCUrEEqe2ABCkL0KLI"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-RenameFolderLambdaFunctionQualifiedArn"
      }
    },
    "RemoveFileLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemoveFileLambdaVersion2aMVNEmVDakBdvDiM4j1wwBO9lpIhTVmpgxMLA73d9Q"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-RemoveFileLambdaFunctionQualifiedArn"
      }
    },
    "GetSharedFilesLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetSharedFilesLambdaVersionO5CBF2cJXnzd11ADWXyOtFVH0uJZ5WxOSyAGVejEM"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-GetSharedFilesLambdaFunctionQualifiedArn"
      }
    },
    "RemovePermissionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemovePermissionLambdaVersion09mmwMOmgbPFVQZliDXHa3KTTaEsVJfEfetEgY0NXAI"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-RemovePermissionLambdaFunctionQualifiedArn"
      }
    },
    "SaveRequestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SaveRequestLambdaVersion2d0bKIj6GvJf8amjBo34QrzH85tXlTHWuca6XG1GhHE"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-SaveRequestLambdaFunctionQualifiedArn"
      }
    },
    "MoveFileLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "MoveFileLambdaVersionYkYNzKB4crnL6VjpDRa68G6UA4SEaAAkg0eoh3I"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-MoveFileLambdaFunctionQualifiedArn"
      }
    },
    "AcceptRequestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AcceptRequestLambdaVersioneW6h8SVZCKCGPFB3Xi14kIrUTwjR9FPflCC5jbE9V4"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-AcceptRequestLambdaFunctionQualifiedArn"
      }
    },
    "SendInviteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SendInviteLambdaVersion5Fw8dr0U2vFcDmcm7870SdQ2EaKd0bJKP44cFwfd0Hc"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-SendInviteLambdaFunctionQualifiedArn"
      }
    },
    "GetRequestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetRequestLambdaVersionalmPny605IWMpmF9oS9oiZI9RHKkpJI3fmr6nk4wNY"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-GetRequestLambdaFunctionQualifiedArn"
      }
    },
    "GetPermissionLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetPermissionLambdaVersionGlGMNdWtH70Kps9ik3D98q5m8Bp1XDMsAvTwsxn60"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-GetPermissionLambdaFunctionQualifiedArn"
      }
    },
    "GetEmailLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetEmailLambdaVersiongQvRW4UNvD7zaALSaScoMuGrgKo9BlLKu04KuylxQ4"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-GetEmailLambdaFunctionQualifiedArn"
      }
    },
    "RemoveRequestLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RemoveRequestLambdaVersionDwRG5MEvacFfuYcvoU3YQxrB9JA7bJXXLuKlp9mdyA"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-RemoveRequestLambdaFunctionQualifiedArn"
      }
    },
    "TestiramoStepLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TestiramoStepLambdaVersionPTB3DYPG1t18qw4AcUaUu369Dt12LLezMhVIGPHApBg"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-TestiramoStepLambdaFunctionQualifiedArn"
      }
    },
    "TestiramoStep2LambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TestiramoStep2LambdaVersionLZQl0nHG18vy8636ZfCgJ045WeRLGe7Pnw9GKMlSgk"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-TestiramoStep2LambdaFunctionQualifiedArn"
      }
    },
    "UndoUploadLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UndoUploadLambdaVersionLftDYO1ri1KvMg1zi80gU6GajIrFsqOlTrQBcNAuKg"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-UndoUploadLambdaFunctionQualifiedArn"
      }
    },
    "SendToSqsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SendToSqsLambdaVersionkil8oiUeXSxykpUky97WOq3UOISBpIDFLiYehZFk"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-SendToSqsLambdaFunctionQualifiedArn"
      }
    },
    "UpdateSharedMetaDataLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateSharedMetaDataLambdaVersionYW0aCkEdNPGj9fMqOD5FlYDrIfCSicr33VKOj4HS1I"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-UpdateSharedMetaDataLambdaFunctionQualifiedArn"
      }
    },
    "UndoMovingLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UndoMovingLambdaVersion60waATZ30JP5gvACGcUyR6khGfwoWV21zW6HB7hpUY"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-UndoMovingLambdaFunctionQualifiedArn"
      }
    },
    "FileUploadStateMachineStepFunctionsStateMachineArn": {
      "Description": "Current StateMachine Arn",
      "Value": {
        "Ref": "FileUploadStateMachineStepFunctionsStateMachine"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-FileUploadStateMachineStepFunctionsStateMachineArn"
      }
    },
    "FileRenameStateMachineStepFunctionsStateMachineArn": {
      "Description": "Current StateMachine Arn",
      "Value": {
        "Ref": "FileRenameStateMachineStepFunctionsStateMachine"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-FileRenameStateMachineStepFunctionsStateMachineArn"
      }
    },
    "TestnaStateMasinaStepFunctionsStateMachineArn": {
      "Description": "Current StateMachine Arn",
      "Value": {
        "Ref": "TestnaStateMasinaStepFunctionsStateMachine"
      },
      "Export": {
        "Name": "sls-cloud-project-dev-TestnaStateMasinaStepFunctionsStateMachineArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-cloud-project-dev-ServiceEndpoint"
      }
    }
  }
}