{
  "service": {
    "service": "cloud-project",
    "serviceObject": {
      "name": "cloud-project"
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.7",
      "profile": "Martic",
      "stage": "dev",
      "region": "eu-central-1",
      "memorySize": 128,
      "timeout": 10,
      "environment": {
        "USER_TABLE": {
          "Ref": "userTable"
        }
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "ses:SendEmail",
            "ses:SendRawEmail"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "cognito-idp:AdminCreateUser",
            "cognito-idp:AdminUpdateUserAttributes",
            "cognito-idp:AdminSetUserPassword"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ses:VerifyEmailIdentity"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "ses:ListVerifiedEmailAddresses"
          ],
          "Resource": "*"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": [
            {
              "Fn::GetAtt": [
                "userTable",
                "Arn"
              ]
            }
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": [
            {
              "Fn::GetAtt": [
                "FilePermissionsTable",
                "Arn"
              ]
            }
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": [
            {
              "Fn::GetAtt": [
                "DynamoDbMetaData",
                "Arn"
              ]
            }
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": [
            {
              "Fn::GetAtt": [
                "registrationRequestTable2",
                "Arn"
              ]
            }
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "sqs:SendMessage",
            "sqs:ReceiveMessage",
            "sqs:DeleteMessage",
            "sqs:PurgeQueue",
            "sqs:CreateQueue",
            "sqs:DeleteQueue",
            "sqs:GetQueueUrl"
          ],
          "Resource": [
            {
              "Fn::GetAtt": [
                "notificationQueue",
                "Arn"
              ]
            }
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3:DeleteObject"
          ],
          "Resource": [
            "arn:aws:s3:::tim7-project-files-bucket",
            "arn:aws:s3:::tim7-project-files-bucket/*"
          ]
        }
      ],
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "SaveUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-saveUser"
            }
          },
          "GetUsersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-getUsers"
            }
          },
          "GetFoldersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-getFolders"
            }
          },
          "GetFilesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-getFiles"
            }
          },
          "GetAllFilesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-getAllFiles"
            }
          },
          "DownloadFilesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-downloadFiles"
            }
          },
          "GetMetaDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-getMetaData"
            }
          },
          "DownloadSharedLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-downloadShared"
            }
          },
          "GetSharedMetaDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-getSharedMetaData"
            }
          },
          "AddPermissionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-addPermission"
            }
          },
          "SendNotificationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-sendNotification"
            }
          },
          "UploadMetaDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-uploadMetaData"
            }
          },
          "RenameMetaDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-renameMetaData"
            }
          },
          "UpdateMetaDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-updateMetaData"
            }
          },
          "UploadFileLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-uploadFile"
            }
          },
          "UploadFolderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-uploadFolder"
            }
          },
          "RenameFolderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-renameFolder"
            }
          },
          "MoveFileLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-moveFile"
            }
          },
          "RemoveFileLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-removeFile"
            }
          },
          "RemoveFolderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-removeFolder"
            }
          },
          "GetSharedFilesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-getSharedFiles"
            }
          },
          "RemovePermissionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-removePermission"
            }
          },
          "GetPermissionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-getPermission"
            }
          },
          "SaveRequestLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-saveRequest"
            }
          },
          "RemoveRequestLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-removeRequest"
            }
          },
          "GetRequestLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-getRequest"
            }
          },
          "SendInviteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-sendInvite"
            }
          },
          "AcceptRequestLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-acceptRequest"
            }
          },
          "GetEmailLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-getEmail"
            }
          },
          "TestiramoStepLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-testiramoStep"
            }
          },
          "TestiramoStep2LogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-testiramoStep2"
            }
          },
          "UndoUploadLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-undoUpload"
            }
          },
          "UndoMovingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-undoMoving"
            }
          },
          "SendToSqsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/cloud-project-dev-sendToSqs"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "cloud-project",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cloud-project-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/cloud-project-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][3]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][4]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][5]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][6]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][7]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][8]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][9]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          "arn:aws:sqs:eu-central-1:841941972097:notificationQueue"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "cloud-project",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "SaveUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/saveUser.zip"
              },
              "Handler": "saveUser/save_user.save",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-saveUser",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SaveUserLogGroup"
            ]
          },
          "GetUsersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/getUsers.zip"
              },
              "Handler": "getUsers/get_users.get_all_users",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-getUsers",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUsersLogGroup"
            ]
          },
          "GetFoldersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/getFolders.zip"
              },
              "Handler": "getFolders/get_folders.get_all_folders",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-getFolders",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFoldersLogGroup"
            ]
          },
          "GetFilesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/getFiles.zip"
              },
              "Handler": "getFiles/get_files.get_files",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-getFiles",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFilesLogGroup"
            ]
          },
          "GetAllFilesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/getAllFiles.zip"
              },
              "Handler": "getAllFiles/get_all_files.get_all_files",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-getAllFiles",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllFilesLogGroup"
            ]
          },
          "DownloadFilesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/downloadFiles.zip"
              },
              "Handler": "fileDownload/download_file.download_file",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-downloadFiles",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DownloadFilesLogGroup"
            ]
          },
          "GetMetaDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/getMetaData.zip"
              },
              "Handler": "getMetaData/get_metadata.get_metadata",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-getMetaData",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetMetaDataLogGroup"
            ]
          },
          "DownloadSharedLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/downloadShared.zip"
              },
              "Handler": "downloadShared/download_shared.download_shared",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-downloadShared",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DownloadSharedLogGroup"
            ]
          },
          "GetSharedMetaDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/getSharedMetaData.zip"
              },
              "Handler": "getSharedMetaData/get_shared_metadata.get_shared_metadata",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-getSharedMetaData",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSharedMetaDataLogGroup"
            ]
          },
          "AddPermissionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/addPermission.zip"
              },
              "Handler": "addPermission/add_permission.add_permission",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-addPermission",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddPermissionLogGroup"
            ]
          },
          "SendNotificationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/sendNotification.zip"
              },
              "Handler": "sendNotification/send_notification.send_notification",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-sendNotification",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SendNotificationLogGroup"
            ]
          },
          "UploadMetaDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/uploadMetaData.zip"
              },
              "Handler": "metaDataUpload/upload_meta_data.upload_file",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-uploadMetaData",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UploadMetaDataLogGroup"
            ]
          },
          "RenameMetaDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/renameMetaData.zip"
              },
              "Handler": "renameMetaData/rename_metadata.rename_metadata",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-renameMetaData",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RenameMetaDataLogGroup"
            ]
          },
          "UpdateMetaDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/updateMetaData.zip"
              },
              "Handler": "updateMetaData/update_metadata.update_metadata",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-updateMetaData",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateMetaDataLogGroup"
            ]
          },
          "UploadFileLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/uploadFile.zip"
              },
              "Handler": "fileUpload/upload_file.upload_file",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-uploadFile",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UploadFileLogGroup"
            ]
          },
          "UploadFolderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/uploadFolder.zip"
              },
              "Handler": "uploadFolder/upload_folder.upload_folder",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-uploadFolder",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UploadFolderLogGroup"
            ]
          },
          "RenameFolderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/renameFolder.zip"
              },
              "Handler": "renameFolder/rename_folder.rename_folder",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-renameFolder",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RenameFolderLogGroup"
            ]
          },
          "MoveFileLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/moveFile.zip"
              },
              "Handler": "moveFile/move_file.move_file",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-moveFile",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "MoveFileLogGroup"
            ]
          },
          "RemoveFileLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/removeFile.zip"
              },
              "Handler": "removeFile/remove_file.remove_file",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-removeFile",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RemoveFileLogGroup"
            ]
          },
          "RemoveFolderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/removeFolder.zip"
              },
              "Handler": "removeFolder/remove_folder.remove_folder",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-removeFolder",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RemoveFolderLogGroup"
            ]
          },
          "GetSharedFilesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/getSharedFiles.zip"
              },
              "Handler": "getSharedFiles/get_shared_files.get_shared_files",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-getSharedFiles",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSharedFilesLogGroup"
            ]
          },
          "RemovePermissionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/removePermission.zip"
              },
              "Handler": "removeViewPermission/remove_view_permission.remove_permission",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-removePermission",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RemovePermissionLogGroup"
            ]
          },
          "GetPermissionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/getPermission.zip"
              },
              "Handler": "getViewPermission/get_view_permission.get_permissions",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-getPermission",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetPermissionLogGroup"
            ]
          },
          "SaveRequestLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/saveRequest.zip"
              },
              "Handler": "saveRegistrationRequest/save_registration_request.save_request",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-saveRequest",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SaveRequestLogGroup"
            ]
          },
          "RemoveRequestLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/removeRequest.zip"
              },
              "Handler": "removeRegistrationRequest/remove_registration_request.remove_request",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-removeRequest",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RemoveRequestLogGroup"
            ]
          },
          "GetRequestLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/getRequest.zip"
              },
              "Handler": "getRegistrationRequests/get_registration_requests.get_requests",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-getRequest",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetRequestLogGroup"
            ]
          },
          "SendInviteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/sendInvite.zip"
              },
              "Handler": "sendInvite/send_invite.send_invite",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-sendInvite",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SendInviteLogGroup"
            ]
          },
          "AcceptRequestLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/acceptRequest.zip"
              },
              "Handler": "acceptRegistrationRequest/accept_registration_request.accept_request",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-acceptRequest",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AcceptRequestLogGroup"
            ]
          },
          "GetEmailLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/getEmail.zip"
              },
              "Handler": "getEmail/get_email.get_email",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-getEmail",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEmailLogGroup"
            ]
          },
          "TestiramoStepLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/testiramoStep.zip"
              },
              "Handler": "testiramoStep/testiramo_step.testiramo_step",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-testiramoStep",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TestiramoStepLogGroup"
            ]
          },
          "TestiramoStep2LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/testiramoStep2.zip"
              },
              "Handler": "testiramoStep2/testiramo_step2.testiramo_step2",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-testiramoStep2",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TestiramoStep2LogGroup"
            ]
          },
          "UndoUploadLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/undoUpload.zip"
              },
              "Handler": "undoUpload/undo_upload.undo_upload",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-undoUpload",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UndoUploadLogGroup"
            ]
          },
          "UndoMovingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/undoMoving.zip"
              },
              "Handler": "undoMoving/undo_moving.undo_moving",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-undoMoving",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UndoMovingLogGroup"
            ]
          },
          "SendToSqsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z/sendToSqs.zip"
              },
              "Handler": "sendToSqs/send_to_sqs.send_to_sqs",
              "Runtime": "python3.7",
              "FunctionName": "cloud-project-dev-sendToSqs",
              "MemorySize": 128,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"USER_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SendToSqsLogGroup"
            ]
          },
          "SaveUserLambdaVersionLU2T6NB3MtdrGgufxvpKtffFX6DyIg6GTkj5OpxaLw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SaveUserLambdaFunction"
              },
              "CodeSha256": "0fb/uFRd1qMm3UYcm44dji3kFHMsSLZveqxerwSmwkY="
            }
          },
          "GetUsersLambdaVersionkq7z7Ahuyf8OPScYVK3WKlq3cSaP1lt78WHzzzI8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUsersLambdaFunction"
              },
              "CodeSha256": "CwPxrDc5Hsey5tlhXbktH/EM1KPnmhg1ricc7lxTZFw="
            }
          },
          "GetFilesLambdaVersionisMmF0lzXVxnAE2CUGFhOtEaIaplSLUCwZuqDzP73CY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFilesLambdaFunction"
              },
              "CodeSha256": "+PQrAW7FqjO6b59d2vdPTO8MM2WnYVMGXJ155uErxzA="
            }
          },
          "GetFoldersLambdaVersionXjfOscPKgO77y5EANO5BCbOCuPOxwrkqMtjuHfRvD8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFoldersLambdaFunction"
              },
              "CodeSha256": "AsUxSv/BW+fs06iAFHslGyqm1Urge7Zms2W570Gs+Xc="
            }
          },
          "DownloadFilesLambdaVersionk7Pzyao8nswJEfn7lsIh8CejwlcIQZXL1Pnsu3Ds": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DownloadFilesLambdaFunction"
              },
              "CodeSha256": "p0CVPW7AfB7LDU7h0BqZ5+f4NkiOeAF0Zyhc9Im6mCM="
            }
          },
          "GetAllFilesLambdaVersiondvaXjZnK9eRmAUdyN15IG4Ocl3alOzJ8vZFZ6zgrfUE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllFilesLambdaFunction"
              },
              "CodeSha256": "RlJP8SZqSLlSTP0JWSxECmmvlJdHyQIyTynUxV6qK08="
            }
          },
          "GetMetaDataLambdaVersionCmjKBu2U4kuGReMSPrZEg7EL3fQ2yzzSI1VLxSaXk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetMetaDataLambdaFunction"
              },
              "CodeSha256": "b3GhG6GezwMPUFYVU6l0K9D44QbcyIF6prY4Y3aCuho="
            }
          },
          "SendNotificationLambdaVersionrqlRxgzvaXIR7HX18SXRJuFs14tHXJF1LdxSbLLUSso": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendNotificationLambdaFunction"
              },
              "CodeSha256": "bQhZxR4R8/EE/WklanV9/MFbL52zlQ2got7XdQxX930="
            }
          },
          "GetSharedMetaDataLambdaVersionLtysHEqfwa0VGBpWDL7QtcWnYmikEjyf4ktucVllOE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSharedMetaDataLambdaFunction"
              },
              "CodeSha256": "5GWoX+LLmsB0mdsx6i2fo5a1V2GSpUpOZ+YZEINzHI4="
            }
          },
          "DownloadSharedLambdaVersion9R4V8TkrNo8SPDTP71bNXMG9SOHRQ2z3OvwEayFg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DownloadSharedLambdaFunction"
              },
              "CodeSha256": "gaBaqiZVHTeMlXqLCl88f1GD3jPecFwMrCtn1aqeYr4="
            }
          },
          "UploadMetaDataLambdaVersionLYB15SzdZZDOWBiiLf2CViUYwOUB4P90AJXxrqtb6xg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UploadMetaDataLambdaFunction"
              },
              "CodeSha256": "C2X9YU6Sz0u9f7oRGO1N15TiiAhrevx1WTuq2V18AAM="
            }
          },
          "AddPermissionLambdaVersionJ58S1EBK0OYIqMfpQ40Bt8vnEVUBorAOIIwG8xKk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddPermissionLambdaFunction"
              },
              "CodeSha256": "0kHOXMW2gVv3vPr7ox5r2CZxLjQihdqZSCA5t7/EJ5g="
            }
          },
          "RenameMetaDataLambdaVersionRUPZXCiCOBkVyaP9HQxno0eMPrUZ8m0M0eaEQKVok38": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RenameMetaDataLambdaFunction"
              },
              "CodeSha256": "tzVwnoVO0QYrjGTWBa+gvmBnhiXOE8uLwg0MN4KwZXU="
            }
          },
          "UpdateMetaDataLambdaVersionmunxH91ZpSor72D1OnWIg5mlfpMBDGJBmms794qLM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateMetaDataLambdaFunction"
              },
              "CodeSha256": "AfnbgJG10W0EsJ93zjJtqYN3woxLXgUXFxbGeiZadM4="
            }
          },
          "UploadFileLambdaVersionaMHP9NJj4nWUgDFsYJg3SgNIUMcbVij2d8tWxKUA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UploadFileLambdaFunction"
              },
              "CodeSha256": "zdAfZ1eEHb4J6b03VjkNFacYBu+6dc1rD1ftc4t+pJE="
            }
          },
          "UploadFolderLambdaVersionBcQlB0q2tHyLexYPYMmFgqHn1gaj07A31b2FB5B7O4U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UploadFolderLambdaFunction"
              },
              "CodeSha256": "PvxtvVXzaDRqIUvHjP+KC8J2yTJn0xoFAPvDMpEjBRc="
            }
          },
          "MoveFileLambdaVersionYhHB9pz72BEHOOX87vebaqqP6souihpRweJZE9xHpc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MoveFileLambdaFunction"
              },
              "CodeSha256": "/yA7m2sxhojuxYQAkNdl4sriWCfGVHltERMQxvA5tR8="
            }
          },
          "RenameFolderLambdaVersionMythAOrCAoen2XFPnFqh3UUWZovgx8j8oVvLOxsrg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RenameFolderLambdaFunction"
              },
              "CodeSha256": "c181ywNVmTX7YTrjrPMzuJHa9NznKBeZvm7QKj7rpQc="
            }
          },
          "GetPermissionLambdaVersionjw65peDEJg9yNB8aklaokreUZs1Hhpsz2uxcTTAzQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPermissionLambdaFunction"
              },
              "CodeSha256": "LvLX35fOetNP+M6N6L2RNMe0PkRBxT5aUVgqzmt1ohE="
            }
          },
          "RemoveFileLambdaVersionGyKvIugs1t9vb8m70JYLSF9UkM2ObZlFDGu9sKbgHCo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RemoveFileLambdaFunction"
              },
              "CodeSha256": "IFusRXZcUGUhee/N2rfOd6b3gNnhldO68OxDg7WEtrQ="
            }
          },
          "RemoveFolderLambdaVersionuIq0jLQa6kg0JQYfYuBDYEEXncvCphtllMZdbaTcS4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RemoveFolderLambdaFunction"
              },
              "CodeSha256": "HC3vG1DF/eV1HNWNRI981Yu/lOP25aio1882sqOJoRg="
            }
          },
          "RemoveRequestLambdaVersionCxG1F0dkblQaccMlVMGTtWaAoFgis92DmWtfbLJ10M": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RemoveRequestLambdaFunction"
              },
              "CodeSha256": "bSiM3SlFKXbKmwIAVloo30LMH8H2rw/oLsXdJAkWpJo="
            }
          },
          "RemovePermissionLambdaVersion0gRpcHbbOeZy6LJsRSFhLQfQGF8m7cP3FoEQxQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RemovePermissionLambdaFunction"
              },
              "CodeSha256": "gLe0oTjiEQCb+jaJ6G2G+JEFH+IooTbR+VwQUqiT0E4="
            }
          },
          "GetSharedFilesLambdaVersionCDCp1KXu1ZhwDbeL7YXAC0RonNOBjIqG9OsqcXgfM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSharedFilesLambdaFunction"
              },
              "CodeSha256": "eeLitAZu1bqkpr4b2JLheZ/sndqO9Z6IbmOOu2j3V/w="
            }
          },
          "AcceptRequestLambdaVersionB2eQ5cLymwDMF2v5swNyWMz1uY2A2GQlAbb7W3UWGI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AcceptRequestLambdaFunction"
              },
              "CodeSha256": "SgMd/G5AvKRCFyljc0npxeIMqBEU4G1uOkRSRIS6m1s="
            }
          },
          "GetRequestLambdaVersionXfdNmYigB4gh7iMqOdPSsXaXmREMIr5tgcI4qgoFDo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetRequestLambdaFunction"
              },
              "CodeSha256": "irL/w5xIWPWQpQ5U9As0HgbX8LhW/k0yCnkamYdRwXA="
            }
          },
          "SaveRequestLambdaVersion33DglyIvvk8kCrmfCqLmN6vxGB1owx5eC5smGjn6s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SaveRequestLambdaFunction"
              },
              "CodeSha256": "+JVytP6LHWz5Xe9s6Hl9KhBhyuD0t7rhPhm00NdWITs="
            }
          },
          "SendInviteLambdaVersionEUDaF0Hs4fGgNkfxD2Hh23rnamKRXyc6aJJZbLzdOI8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendInviteLambdaFunction"
              },
              "CodeSha256": "j4sNUd4rKz9q8BI4JuDJAeuDeP64S39G+QCIIL89+yA="
            }
          },
          "GetEmailLambdaVersionht736qOOzrXKTh70HJXMt6wjp8nGl58gra5NPUSo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEmailLambdaFunction"
              },
              "CodeSha256": "CaSWIPGr+hczb9MMNffnvVXD1HHXne4UA3QUB/YcW4Y="
            }
          },
          "TestiramoStep2LambdaVersionv2qR8xunmF8gKFlm57mvxgC5VsSWayzlIIYgmD3No8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TestiramoStep2LambdaFunction"
              },
              "CodeSha256": "IIXqwIFSqZ5d5TLGwGZ1jh2UEDfO9wSg1smR6lGy2pc="
            }
          },
          "UndoMovingLambdaVersionYlMm9OPwVTmQNoQWT2fUf1GVtBZseyjUSjbzwKsc6I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UndoMovingLambdaFunction"
              },
              "CodeSha256": "aQUsbeoXtOgePwi+6t/M0ZdCKCHOxc6ZNSj/vLCdjgU="
            }
          },
          "SendToSqsLambdaVersionoFabzPulsI5qJMAOuXAp4KZekTClxRKOTvjLh4wJ0RA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendToSqsLambdaFunction"
              },
              "CodeSha256": "MWmLKvYn/w1SpvXnlaLgSEyDatLvnyiOllru2lI2F4Y="
            }
          },
          "TestiramoStepLambdaVersiontAZD6eFNWrs3M1TMWlqq0CYXyucosAV4thkcp2ZCPA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TestiramoStepLambdaFunction"
              },
              "CodeSha256": "86zo71lwQvplYt9FZ9ZAoMK9ORg+Hj296sgK6xq3NNc="
            }
          },
          "UndoUploadLambdaVersionpK0YdCPJ0213vTJWEMe2mnFdqIAqUQS9XmkxKfAKgg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UndoUploadLambdaFunction"
              },
              "CodeSha256": "YG0b9vO1Nl2A2Grglly7xvoCGVmddUQuKJJUID+iBF4="
            }
          },
          "FileUploadStateMachineStepFunctionsStateMachineRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": {
                        "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                      }
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "dev-cloud-project-statemachine",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "lambda:InvokeFunction"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "UploadFileLambdaFunction",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::GetAtt": [
                                    "UploadFileLambdaFunction",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UploadMetaDataLambdaFunction",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::GetAtt": [
                                    "UploadMetaDataLambdaFunction",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "SendToSqsLambdaFunction",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::GetAtt": [
                                    "SendToSqsLambdaFunction",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UndoUploadLambdaFunction",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::GetAtt": [
                                    "UndoUploadLambdaFunction",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "FileRenameStateMachineStepFunctionsStateMachineRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": {
                        "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                      }
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "dev-cloud-project-statemachine",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "lambda:InvokeFunction"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "MoveFileLambdaFunction",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::GetAtt": [
                                    "MoveFileLambdaFunction",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "RenameMetaDataLambdaFunction",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::GetAtt": [
                                    "RenameMetaDataLambdaFunction",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "SendToSqsLambdaFunction",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::GetAtt": [
                                    "SendToSqsLambdaFunction",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UndoMovingLambdaFunction",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::GetAtt": [
                                    "UndoMovingLambdaFunction",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "TestnaStateMasinaStepFunctionsStateMachineRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": {
                        "Fn::Sub": "states.${AWS::Region}.amazonaws.com"
                      }
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "dev-cloud-project-statemachine",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "lambda:InvokeFunction"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "UploadFileLambdaFunction",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::GetAtt": [
                                    "UploadFileLambdaFunction",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UploadMetaDataLambdaFunction",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::GetAtt": [
                                    "UploadMetaDataLambdaFunction",
                                    "Arn"
                                  ]
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "FileUploadStateMachineStepFunctionsStateMachine": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
              "DefinitionString": {
                "Fn::Sub": [
                  "{\n  \"StartAt\": \"uploadFile\",\n  \"States\": {\n    \"uploadFile\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${ae1b6bf551bb08e6d73b5e6ccd81a809}\",\n      \"Next\": \"uploadMetaData\"\n    },\n    \"uploadMetaData\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${af2f906013cf1145a224d614f405b05c}\",\n      \"Catch\": [\n        {\n          \"ErrorEquals\": [\n            \"States.ALL\"\n          ],\n          \"Next\": \"undoUpload\"\n        }\n      ],\n      \"Next\": \"sendToSqs\"\n    },\n    \"sendToSqs\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${61c4c3d2f891cef4bbf3f25f77ce9b8c}\",\n      \"End\": true\n    },\n    \"undoUpload\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${4008ef9cbce5d188f278903292f2eec3}\",\n      \"ResultPath\": \"$.undoUploadResult\",\n      \"End\": true\n    }\n  }\n}",
                  {
                    "ae1b6bf551bb08e6d73b5e6ccd81a809": {
                      "Fn::GetAtt": [
                        "UploadFileLambdaFunction",
                        "Arn"
                      ]
                    },
                    "af2f906013cf1145a224d614f405b05c": {
                      "Fn::GetAtt": [
                        "UploadMetaDataLambdaFunction",
                        "Arn"
                      ]
                    },
                    "61c4c3d2f891cef4bbf3f25f77ce9b8c": {
                      "Fn::GetAtt": [
                        "SendToSqsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "4008ef9cbce5d188f278903292f2eec3": {
                      "Fn::GetAtt": [
                        "UndoUploadLambdaFunction",
                        "Arn"
                      ]
                    }
                  }
                ]
              },
              "RoleArn": {
                "Fn::GetAtt": [
                  "FileUploadStateMachineStepFunctionsStateMachineRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FileUploadStateMachineStepFunctionsStateMachineRole"
            ]
          },
          "FileRenameStateMachineStepFunctionsStateMachine": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
              "DefinitionString": {
                "Fn::Sub": [
                  "{\n  \"StartAt\": \"moveFile\",\n  \"States\": {\n    \"moveFile\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${022021a1f7f0614def4ed900cd1bed50}\",\n      \"Next\": \"renameMetaData\"\n    },\n    \"renameMetaData\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${7d4e542f016f8a0f2e1c27a73335d3c2}\",\n      \"Catch\": [\n        {\n          \"ErrorEquals\": [\n            \"States.ALL\"\n          ],\n          \"Next\": \"undoMoving\"\n        }\n      ],\n      \"Next\": \"sendToSqs\"\n    },\n    \"sendToSqs\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${61c4c3d2f891cef4bbf3f25f77ce9b8c}\",\n      \"End\": true\n    },\n    \"undoMoving\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${163b4bf67870202fa552e0211f1d5bdb}\",\n      \"ResultPath\": \"$.undoUploadResult\",\n      \"OutputPath\": \"$.Payload\",\n      \"End\": true\n    }\n  }\n}",
                  {
                    "022021a1f7f0614def4ed900cd1bed50": {
                      "Fn::GetAtt": [
                        "MoveFileLambdaFunction",
                        "Arn"
                      ]
                    },
                    "7d4e542f016f8a0f2e1c27a73335d3c2": {
                      "Fn::GetAtt": [
                        "RenameMetaDataLambdaFunction",
                        "Arn"
                      ]
                    },
                    "61c4c3d2f891cef4bbf3f25f77ce9b8c": {
                      "Fn::GetAtt": [
                        "SendToSqsLambdaFunction",
                        "Arn"
                      ]
                    },
                    "163b4bf67870202fa552e0211f1d5bdb": {
                      "Fn::GetAtt": [
                        "UndoMovingLambdaFunction",
                        "Arn"
                      ]
                    }
                  }
                ]
              },
              "RoleArn": {
                "Fn::GetAtt": [
                  "FileRenameStateMachineStepFunctionsStateMachineRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "FileRenameStateMachineStepFunctionsStateMachineRole"
            ]
          },
          "TestnaStateMasinaStepFunctionsStateMachine": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
              "DefinitionString": {
                "Fn::Sub": [
                  "{\n  \"StartAt\": \"uploadFile\",\n  \"States\": {\n    \"uploadFile\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${ae1b6bf551bb08e6d73b5e6ccd81a809}\",\n      \"Next\": \"uploadMetaData\"\n    },\n    \"uploadMetaData\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${af2f906013cf1145a224d614f405b05c}\",\n      \"End\": true\n    }\n  }\n}",
                  {
                    "ae1b6bf551bb08e6d73b5e6ccd81a809": {
                      "Fn::GetAtt": [
                        "UploadFileLambdaFunction",
                        "Arn"
                      ]
                    },
                    "af2f906013cf1145a224d614f405b05c": {
                      "Fn::GetAtt": [
                        "UploadMetaDataLambdaFunction",
                        "Arn"
                      ]
                    }
                  }
                ]
              },
              "RoleArn": {
                "Fn::GetAtt": [
                  "TestnaStateMasinaStepFunctionsStateMachineRole",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "TestnaStateMasinaStepFunctionsStateMachineRole"
            ]
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-cloud-project",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceSave": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "save",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSaveUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSave"
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSaveRegistrationDashrequest": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceSave"
              },
              "PathPart": "registration-request",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFolders": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "folders",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFiles": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "files",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAllDashfiles": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "all-files",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDownload": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "download",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMetadata": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "metadata",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceDownloadDashshared": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "download-shared",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSharedDashmetadata": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "shared-metadata",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFileDashpermission": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "file-permission",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdateDashmetadata": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "update-metadata",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUploadDashfolder": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "upload-folder",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRenameDashfolder": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "rename-folder",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRemoveDashfile": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "remove-file",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRemoveDashfolder": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "remove-folder",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetDashsharedDashfiles": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "get-shared-files",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRegistrationDashrequest": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "registration-request",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSendDashinvite": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "send-invite",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAcceptDashregistrationDashrequest": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "accept-registration-request",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGetDashemail": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "get-email",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSaveUsersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSaveUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFoldersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFolders"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFilesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFiles"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAllDashfilesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAllDashfiles"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDownloadOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDownload"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMetadataOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMetadata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodDownloadDashsharedOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceDownloadDashshared"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSharedDashmetadataOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSharedDashmetadata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFileDashpermissionOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,DELETE,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFileDashpermission"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUpdateDashmetadataOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdateDashmetadata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUploadDashfolderOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUploadDashfolder"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRenameDashfolderOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRenameDashfolder"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRemoveDashfileOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRemoveDashfile"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRemoveDashfolderOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRemoveDashfolder"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGetDashsharedDashfilesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashsharedDashfiles"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSaveRegistrationDashrequestOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSaveRegistrationDashrequest"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRegistrationDashrequestOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,DELETE'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRegistrationDashrequest"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSendDashinviteOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSendDashinvite"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAcceptDashregistrationDashrequestOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAcceptDashregistrationDashrequest"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGetDashemailOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashemail"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodSaveUsersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSaveUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SaveUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SaveUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUsersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUsersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFoldersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFolders"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetFoldersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetFoldersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFilesPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFiles"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetFilesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetFilesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAllDashfilesPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAllDashfiles"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllFilesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAllFilesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDownloadPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDownload"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DownloadFilesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DownloadFilesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMetadataPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMetadata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetMetaDataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetMetaDataLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodDownloadDashsharedPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceDownloadDashshared"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DownloadSharedLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DownloadSharedLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSharedDashmetadataPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSharedDashmetadata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetSharedMetaDataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetSharedMetaDataLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFileDashpermissionPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFileDashpermission"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddPermissionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AddPermissionLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUpdateDashmetadataPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdateDashmetadata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateMetaDataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateMetaDataLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUploadDashfolderPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUploadDashfolder"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UploadFolderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UploadFolderLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRenameDashfolderPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRenameDashfolder"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RenameFolderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RenameFolderLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRemoveDashfilePut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRemoveDashfile"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RemoveFileLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RemoveFileLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRemoveDashfolderPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRemoveDashfolder"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RemoveFolderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RemoveFolderLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetDashsharedDashfilesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashsharedDashfiles"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetSharedFilesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetSharedFilesLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFileDashpermissionDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFileDashpermission"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RemovePermissionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RemovePermissionLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFileDashpermissionGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFileDashpermission"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPermissionLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetPermissionLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSaveRegistrationDashrequestPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSaveRegistrationDashrequest"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SaveRequestLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SaveRequestLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRegistrationDashrequestDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRegistrationDashrequest"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RemoveRequestLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RemoveRequestLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRegistrationDashrequestGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRegistrationDashrequest"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetRequestLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetRequestLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSendDashinvitePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSendDashinvite"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SendInviteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SendInviteLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAcceptDashregistrationDashrequestPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAcceptDashregistrationDashrequest"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AcceptRequestLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AcceptRequestLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodGetDashemailGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGetDashemail"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "COGNITO_USER_POOLS",
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetEmailLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetEmailLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1687796536573": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodSaveUsersOptions",
              "ApiGatewayMethodUsersOptions",
              "ApiGatewayMethodFoldersOptions",
              "ApiGatewayMethodFilesOptions",
              "ApiGatewayMethodAllDashfilesOptions",
              "ApiGatewayMethodDownloadOptions",
              "ApiGatewayMethodMetadataOptions",
              "ApiGatewayMethodDownloadDashsharedOptions",
              "ApiGatewayMethodSharedDashmetadataOptions",
              "ApiGatewayMethodFileDashpermissionOptions",
              "ApiGatewayMethodUpdateDashmetadataOptions",
              "ApiGatewayMethodUploadDashfolderOptions",
              "ApiGatewayMethodRenameDashfolderOptions",
              "ApiGatewayMethodRemoveDashfileOptions",
              "ApiGatewayMethodRemoveDashfolderOptions",
              "ApiGatewayMethodGetDashsharedDashfilesOptions",
              "ApiGatewayMethodSaveRegistrationDashrequestOptions",
              "ApiGatewayMethodRegistrationDashrequestOptions",
              "ApiGatewayMethodSendDashinviteOptions",
              "ApiGatewayMethodAcceptDashregistrationDashrequestOptions",
              "ApiGatewayMethodGetDashemailOptions",
              "ApiGatewayMethodSaveUsersPost",
              "ApiGatewayMethodUsersGet",
              "ApiGatewayMethodFoldersGet",
              "ApiGatewayMethodFilesPut",
              "ApiGatewayMethodAllDashfilesPut",
              "ApiGatewayMethodDownloadPut",
              "ApiGatewayMethodMetadataPut",
              "ApiGatewayMethodDownloadDashsharedPut",
              "ApiGatewayMethodSharedDashmetadataPut",
              "ApiGatewayMethodFileDashpermissionPost",
              "ApiGatewayMethodUpdateDashmetadataPut",
              "ApiGatewayMethodUploadDashfolderPost",
              "ApiGatewayMethodRenameDashfolderPost",
              "ApiGatewayMethodRemoveDashfilePut",
              "ApiGatewayMethodRemoveDashfolderPut",
              "ApiGatewayMethodGetDashsharedDashfilesGet",
              "ApiGatewayMethodFileDashpermissionDelete",
              "ApiGatewayMethodFileDashpermissionGet",
              "ApiGatewayMethodSaveRegistrationDashrequestPost",
              "ApiGatewayMethodRegistrationDashrequestDelete",
              "ApiGatewayMethodRegistrationDashrequestGet",
              "ApiGatewayMethodSendDashinvitePost",
              "ApiGatewayMethodAcceptDashregistrationDashrequestPost",
              "ApiGatewayMethodGetDashemailGet",
              "ApiGatewayMethodUploadDashfilePost",
              "ApiGatewayMethodMoveDashfilePut",
              "ApiGatewayMethodStepDashtestPost"
            ]
          },
          "SaveUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SaveUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUsersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUsersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetFoldersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFoldersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetFilesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFilesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllFilesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllFilesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DownloadFilesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DownloadFilesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetMetaDataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetMetaDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DownloadSharedLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DownloadSharedLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetSharedMetaDataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSharedMetaDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddPermissionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddPermissionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateMetaDataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateMetaDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UploadFolderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UploadFolderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RenameFolderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RenameFolderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RemoveFileLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RemoveFileLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RemoveFolderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RemoveFolderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetSharedFilesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSharedFilesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RemovePermissionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RemovePermissionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetPermissionLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPermissionLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SaveRequestLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SaveRequestLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RemoveRequestLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RemoveRequestLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetRequestLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetRequestLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SendInviteLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendInviteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AcceptRequestLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AcceptRequestLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetEmailLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEmailLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SendNotificationEventSourceMappingSQSNotificationQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 10,
              "EventSourceArn": "arn:aws:sqs:eu-central-1:841941972097:notificationQueue",
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendNotificationLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "ApiGatewayResourceUploadDashfile": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "upload-file",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMoveDashfile": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "move-file",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceStepDashtest": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "step-test",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUploadDashfilePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "AuthorizationType": "COGNITO_USER_POOLS",
              "ApiKeyRequired": false,
              "ResourceId": {
                "Ref": "ApiGatewayResourceUploadDashfile"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Credentials": {
                  "Fn::GetAtt": [
                    "ApigatewayToStepFunctionsRole",
                    "Arn"
                  ]
                },
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":states:action/StartExecution"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": {
                    "Fn::Sub": [
                      "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                      {
                        "StateMachineArn": {
                          "Ref": "FileUploadStateMachineStepFunctionsStateMachine"
                        }
                      }
                    ]
                  },
                  "application/x-www-form-urlencoded": {
                    "Fn::Sub": [
                      "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                      {
                        "StateMachineArn": {
                          "Ref": "FileUploadStateMachineStepFunctionsStateMachine"
                        }
                      }
                    ]
                  }
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200,
                    "SelectionPattern": 200,
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 400,
                    "SelectionPattern": 400,
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseModels": {},
                  "StatusCode": 200
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseModels": {},
                  "StatusCode": 400
                }
              ],
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              }
            }
          },
          "ApiGatewayMethodMoveDashfilePut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "AuthorizationType": "COGNITO_USER_POOLS",
              "ApiKeyRequired": false,
              "ResourceId": {
                "Ref": "ApiGatewayResourceMoveDashfile"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Credentials": {
                  "Fn::GetAtt": [
                    "ApigatewayToStepFunctionsRole",
                    "Arn"
                  ]
                },
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":states:action/StartExecution"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": {
                    "Fn::Sub": [
                      "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                      {
                        "StateMachineArn": {
                          "Ref": "FileRenameStateMachineStepFunctionsStateMachine"
                        }
                      }
                    ]
                  },
                  "application/x-www-form-urlencoded": {
                    "Fn::Sub": [
                      "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                      {
                        "StateMachineArn": {
                          "Ref": "FileRenameStateMachineStepFunctionsStateMachine"
                        }
                      }
                    ]
                  }
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200,
                    "SelectionPattern": 200,
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 400,
                    "SelectionPattern": 400,
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseModels": {},
                  "StatusCode": 200
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseModels": {},
                  "StatusCode": 400
                }
              ],
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              }
            }
          },
          "ApiGatewayMethodStepDashtestPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "AuthorizationType": "COGNITO_USER_POOLS",
              "ApiKeyRequired": false,
              "ResourceId": {
                "Ref": "ApiGatewayResourceStepDashtest"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Credentials": {
                  "Fn::GetAtt": [
                    "ApigatewayToStepFunctionsRole",
                    "Arn"
                  ]
                },
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":states:action/StartExecution"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": {
                    "Fn::Sub": [
                      "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                      {
                        "StateMachineArn": {
                          "Ref": "TestnaStateMasinaStepFunctionsStateMachine"
                        }
                      }
                    ]
                  },
                  "application/x-www-form-urlencoded": {
                    "Fn::Sub": [
                      "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                      {
                        "StateMachineArn": {
                          "Ref": "TestnaStateMasinaStepFunctionsStateMachine"
                        }
                      }
                    ]
                  }
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200,
                    "SelectionPattern": 200,
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 400,
                    "SelectionPattern": 400,
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseModels": {},
                  "StatusCode": 200
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseModels": {},
                  "StatusCode": 400
                }
              ],
              "AuthorizerId": {
                "Ref": "MyApiGatewayAuthorizer"
              }
            }
          },
          "ApiGatewayMethodUploadDashfileOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUploadDashfile"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodMoveDashfileOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceMoveDashfile"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodStepDashtestOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceStepDashtest"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApigatewayToStepFunctionsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "apigateway.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "apigatewaytostepfunctions",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "states:StartExecution"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "notificationQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "notificationQueue",
              "VisibilityTimeout": 300,
              "DelaySeconds": 0,
              "MaximumMessageSize": 262144,
              "ReceiveMessageWaitTimeSeconds": 20
            }
          },
          "userTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "userTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "email",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "registrationRequestTable2": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "registrationRequestTable2",
              "AttributeDefinitions": [
                {
                  "AttributeName": "inviter_email",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "invited_user_email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "inviter_email",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "invited_user_email",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "FilePermissionsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "file-permissions",
              "AttributeDefinitions": [
                {
                  "AttributeName": "granted_user",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "file_path",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "granted_user",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "file_path",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "DynamoDbMetaData": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "meta-data",
              "AttributeDefinitions": [
                {
                  "AttributeName": "emailAndName",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "emailAndName",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "S3BucketForFiles": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "tim7-project-files-bucket",
              "AccessControl": "Private",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST",
                      "DELETE"
                    ],
                    "AllowedOrigins": [
                      "*"
                    ]
                  }
                ]
              }
            }
          },
          "MyUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "my-user-poll",
              "UsernameAttributes": [
                "email"
              ],
              "AutoVerifiedAttributes": [
                "email"
              ],
              "MfaConfiguration": "OFF",
              "AccountRecoverySetting": {
                "RecoveryMechanisms": [
                  {
                    "Name": "verified_email",
                    "Priority": 1
                  }
                ]
              },
              "UserPoolTags": {
                "TagKey": "TagValue"
              }
            }
          },
          "MyUserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "UserPoolId": {
                "Ref": "MyUserPool"
              },
              "ClientName": "my-user-poll",
              "GenerateSecret": false
            }
          },
          "MyApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 10,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "MyCognitoAuthorizer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Type": "COGNITO_USER_POOLS",
              "ProviderARNs": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:cognito-idp:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":userpool/",
                      {
                        "Ref": "MyUserPool"
                      }
                    ]
                  ]
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-ServerlessDeploymentBucketName"
            }
          },
          "SaveUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SaveUserLambdaVersionLU2T6NB3MtdrGgufxvpKtffFX6DyIg6GTkj5OpxaLw"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-SaveUserLambdaFunctionQualifiedArn"
            }
          },
          "GetUsersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUsersLambdaVersionkq7z7Ahuyf8OPScYVK3WKlq3cSaP1lt78WHzzzI8"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-GetUsersLambdaFunctionQualifiedArn"
            }
          },
          "GetFilesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFilesLambdaVersionisMmF0lzXVxnAE2CUGFhOtEaIaplSLUCwZuqDzP73CY"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-GetFilesLambdaFunctionQualifiedArn"
            }
          },
          "GetFoldersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFoldersLambdaVersionXjfOscPKgO77y5EANO5BCbOCuPOxwrkqMtjuHfRvD8"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-GetFoldersLambdaFunctionQualifiedArn"
            }
          },
          "DownloadFilesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DownloadFilesLambdaVersionk7Pzyao8nswJEfn7lsIh8CejwlcIQZXL1Pnsu3Ds"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-DownloadFilesLambdaFunctionQualifiedArn"
            }
          },
          "GetAllFilesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllFilesLambdaVersiondvaXjZnK9eRmAUdyN15IG4Ocl3alOzJ8vZFZ6zgrfUE"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-GetAllFilesLambdaFunctionQualifiedArn"
            }
          },
          "GetMetaDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetMetaDataLambdaVersionCmjKBu2U4kuGReMSPrZEg7EL3fQ2yzzSI1VLxSaXk"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-GetMetaDataLambdaFunctionQualifiedArn"
            }
          },
          "SendNotificationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendNotificationLambdaVersionrqlRxgzvaXIR7HX18SXRJuFs14tHXJF1LdxSbLLUSso"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-SendNotificationLambdaFunctionQualifiedArn"
            }
          },
          "GetSharedMetaDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSharedMetaDataLambdaVersionLtysHEqfwa0VGBpWDL7QtcWnYmikEjyf4ktucVllOE"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-GetSharedMetaDataLambdaFunctionQualifiedArn"
            }
          },
          "DownloadSharedLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DownloadSharedLambdaVersion9R4V8TkrNo8SPDTP71bNXMG9SOHRQ2z3OvwEayFg"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-DownloadSharedLambdaFunctionQualifiedArn"
            }
          },
          "UploadMetaDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UploadMetaDataLambdaVersionLYB15SzdZZDOWBiiLf2CViUYwOUB4P90AJXxrqtb6xg"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-UploadMetaDataLambdaFunctionQualifiedArn"
            }
          },
          "AddPermissionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddPermissionLambdaVersionJ58S1EBK0OYIqMfpQ40Bt8vnEVUBorAOIIwG8xKk"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-AddPermissionLambdaFunctionQualifiedArn"
            }
          },
          "RenameMetaDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RenameMetaDataLambdaVersionRUPZXCiCOBkVyaP9HQxno0eMPrUZ8m0M0eaEQKVok38"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-RenameMetaDataLambdaFunctionQualifiedArn"
            }
          },
          "UpdateMetaDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateMetaDataLambdaVersionmunxH91ZpSor72D1OnWIg5mlfpMBDGJBmms794qLM"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-UpdateMetaDataLambdaFunctionQualifiedArn"
            }
          },
          "UploadFileLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UploadFileLambdaVersionaMHP9NJj4nWUgDFsYJg3SgNIUMcbVij2d8tWxKUA"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-UploadFileLambdaFunctionQualifiedArn"
            }
          },
          "UploadFolderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UploadFolderLambdaVersionBcQlB0q2tHyLexYPYMmFgqHn1gaj07A31b2FB5B7O4U"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-UploadFolderLambdaFunctionQualifiedArn"
            }
          },
          "MoveFileLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MoveFileLambdaVersionYhHB9pz72BEHOOX87vebaqqP6souihpRweJZE9xHpc"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-MoveFileLambdaFunctionQualifiedArn"
            }
          },
          "RenameFolderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RenameFolderLambdaVersionMythAOrCAoen2XFPnFqh3UUWZovgx8j8oVvLOxsrg"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-RenameFolderLambdaFunctionQualifiedArn"
            }
          },
          "GetPermissionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPermissionLambdaVersionjw65peDEJg9yNB8aklaokreUZs1Hhpsz2uxcTTAzQ"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-GetPermissionLambdaFunctionQualifiedArn"
            }
          },
          "RemoveFileLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RemoveFileLambdaVersionGyKvIugs1t9vb8m70JYLSF9UkM2ObZlFDGu9sKbgHCo"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-RemoveFileLambdaFunctionQualifiedArn"
            }
          },
          "RemoveFolderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RemoveFolderLambdaVersionuIq0jLQa6kg0JQYfYuBDYEEXncvCphtllMZdbaTcS4"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-RemoveFolderLambdaFunctionQualifiedArn"
            }
          },
          "RemoveRequestLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RemoveRequestLambdaVersionCxG1F0dkblQaccMlVMGTtWaAoFgis92DmWtfbLJ10M"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-RemoveRequestLambdaFunctionQualifiedArn"
            }
          },
          "RemovePermissionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RemovePermissionLambdaVersion0gRpcHbbOeZy6LJsRSFhLQfQGF8m7cP3FoEQxQ"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-RemovePermissionLambdaFunctionQualifiedArn"
            }
          },
          "GetSharedFilesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSharedFilesLambdaVersionCDCp1KXu1ZhwDbeL7YXAC0RonNOBjIqG9OsqcXgfM"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-GetSharedFilesLambdaFunctionQualifiedArn"
            }
          },
          "AcceptRequestLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AcceptRequestLambdaVersionB2eQ5cLymwDMF2v5swNyWMz1uY2A2GQlAbb7W3UWGI"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-AcceptRequestLambdaFunctionQualifiedArn"
            }
          },
          "GetRequestLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetRequestLambdaVersionXfdNmYigB4gh7iMqOdPSsXaXmREMIr5tgcI4qgoFDo"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-GetRequestLambdaFunctionQualifiedArn"
            }
          },
          "SaveRequestLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SaveRequestLambdaVersion33DglyIvvk8kCrmfCqLmN6vxGB1owx5eC5smGjn6s"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-SaveRequestLambdaFunctionQualifiedArn"
            }
          },
          "SendInviteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendInviteLambdaVersionEUDaF0Hs4fGgNkfxD2Hh23rnamKRXyc6aJJZbLzdOI8"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-SendInviteLambdaFunctionQualifiedArn"
            }
          },
          "GetEmailLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEmailLambdaVersionht736qOOzrXKTh70HJXMt6wjp8nGl58gra5NPUSo"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-GetEmailLambdaFunctionQualifiedArn"
            }
          },
          "TestiramoStep2LambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TestiramoStep2LambdaVersionv2qR8xunmF8gKFlm57mvxgC5VsSWayzlIIYgmD3No8"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-TestiramoStep2LambdaFunctionQualifiedArn"
            }
          },
          "UndoMovingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UndoMovingLambdaVersionYlMm9OPwVTmQNoQWT2fUf1GVtBZseyjUSjbzwKsc6I"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-UndoMovingLambdaFunctionQualifiedArn"
            }
          },
          "SendToSqsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendToSqsLambdaVersionoFabzPulsI5qJMAOuXAp4KZekTClxRKOTvjLh4wJ0RA"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-SendToSqsLambdaFunctionQualifiedArn"
            }
          },
          "TestiramoStepLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TestiramoStepLambdaVersiontAZD6eFNWrs3M1TMWlqq0CYXyucosAV4thkcp2ZCPA"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-TestiramoStepLambdaFunctionQualifiedArn"
            }
          },
          "UndoUploadLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UndoUploadLambdaVersionpK0YdCPJ0213vTJWEMe2mnFdqIAqUQS9XmkxKfAKgg"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-UndoUploadLambdaFunctionQualifiedArn"
            }
          },
          "FileUploadStateMachineStepFunctionsStateMachineArn": {
            "Description": "Current StateMachine Arn",
            "Value": {
              "Ref": "FileUploadStateMachineStepFunctionsStateMachine"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-FileUploadStateMachineStepFunctionsStateMachineArn"
            }
          },
          "FileRenameStateMachineStepFunctionsStateMachineArn": {
            "Description": "Current StateMachine Arn",
            "Value": {
              "Ref": "FileRenameStateMachineStepFunctionsStateMachine"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-FileRenameStateMachineStepFunctionsStateMachineArn"
            }
          },
          "TestnaStateMasinaStepFunctionsStateMachineArn": {
            "Description": "Current StateMachine Arn",
            "Value": {
              "Ref": "TestnaStateMasinaStepFunctionsStateMachine"
            },
            "Export": {
              "Name": "sls-cloud-project-dev-TestnaStateMasinaStepFunctionsStateMachineArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-cloud-project-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-step-functions"
    ],
    "pluginsData": {},
    "functions": {
      "saveUser": {
        "handler": "saveUser/save_user.save",
        "package": {
          "include": [
            "saveUser/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\saveUser.zip"
        },
        "events": [
          {
            "http": {
              "path": "save/users",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-saveUser",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "SaveUserLambdaVersionLU2T6NB3MtdrGgufxvpKtffFX6DyIg6GTkj5OpxaLw"
      },
      "getUsers": {
        "handler": "getUsers/get_users.get_all_users",
        "package": {
          "include": [
            "getUsers/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\getUsers.zip"
        },
        "events": [
          {
            "http": {
              "path": "users",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-getUsers",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "GetUsersLambdaVersionkq7z7Ahuyf8OPScYVK3WKlq3cSaP1lt78WHzzzI8"
      },
      "getFolders": {
        "handler": "getFolders/get_folders.get_all_folders",
        "package": {
          "include": [
            "getFolders/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\getFolders.zip"
        },
        "events": [
          {
            "http": {
              "path": "folders",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-getFolders",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "GetFoldersLambdaVersionXjfOscPKgO77y5EANO5BCbOCuPOxwrkqMtjuHfRvD8"
      },
      "getFiles": {
        "handler": "getFiles/get_files.get_files",
        "package": {
          "include": [
            "getFiles/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\getFiles.zip"
        },
        "events": [
          {
            "http": {
              "path": "files",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-getFiles",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "GetFilesLambdaVersionisMmF0lzXVxnAE2CUGFhOtEaIaplSLUCwZuqDzP73CY"
      },
      "getAllFiles": {
        "handler": "getAllFiles/get_all_files.get_all_files",
        "package": {
          "include": [
            "getAllFiles/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\getAllFiles.zip"
        },
        "events": [
          {
            "http": {
              "path": "all-files",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-getAllFiles",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "GetAllFilesLambdaVersiondvaXjZnK9eRmAUdyN15IG4Ocl3alOzJ8vZFZ6zgrfUE"
      },
      "downloadFiles": {
        "handler": "fileDownload/download_file.download_file",
        "package": {
          "include": [
            "fileDownload/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\downloadFiles.zip"
        },
        "events": [
          {
            "http": {
              "path": "download",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-downloadFiles",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "DownloadFilesLambdaVersionk7Pzyao8nswJEfn7lsIh8CejwlcIQZXL1Pnsu3Ds"
      },
      "getMetaData": {
        "handler": "getMetaData/get_metadata.get_metadata",
        "package": {
          "include": [
            "getMetaData/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\getMetaData.zip"
        },
        "events": [
          {
            "http": {
              "path": "metadata",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-getMetaData",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "GetMetaDataLambdaVersionCmjKBu2U4kuGReMSPrZEg7EL3fQ2yzzSI1VLxSaXk"
      },
      "downloadShared": {
        "handler": "downloadShared/download_shared.download_shared",
        "package": {
          "include": [
            "downloadShared/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\downloadShared.zip"
        },
        "events": [
          {
            "http": {
              "path": "download-shared",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-downloadShared",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "DownloadSharedLambdaVersion9R4V8TkrNo8SPDTP71bNXMG9SOHRQ2z3OvwEayFg"
      },
      "getSharedMetaData": {
        "handler": "getSharedMetaData/get_shared_metadata.get_shared_metadata",
        "package": {
          "include": [
            "getSharedMetaData/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\getSharedMetaData.zip"
        },
        "events": [
          {
            "http": {
              "path": "shared-metadata",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-getSharedMetaData",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "GetSharedMetaDataLambdaVersionLtysHEqfwa0VGBpWDL7QtcWnYmikEjyf4ktucVllOE"
      },
      "addPermission": {
        "handler": "addPermission/add_permission.add_permission",
        "package": {
          "include": [
            "addPermission/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\addPermission.zip"
        },
        "events": [
          {
            "http": {
              "path": "file-permission",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-addPermission",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "AddPermissionLambdaVersionJ58S1EBK0OYIqMfpQ40Bt8vnEVUBorAOIIwG8xKk"
      },
      "sendNotification": {
        "handler": "sendNotification/send_notification.send_notification",
        "package": {
          "include": [
            "sendNotification/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\sendNotification.zip"
        },
        "events": [
          {
            "sqs": {
              "arn": "arn:aws:sqs:eu-central-1:841941972097:notificationQueue"
            }
          }
        ],
        "name": "cloud-project-dev-sendNotification",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "SendNotificationLambdaVersionrqlRxgzvaXIR7HX18SXRJuFs14tHXJF1LdxSbLLUSso"
      },
      "uploadMetaData": {
        "handler": "metaDataUpload/upload_meta_data.upload_file",
        "package": {
          "include": [
            "metaDataUpload/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\uploadMetaData.zip"
        },
        "events": [],
        "name": "cloud-project-dev-uploadMetaData",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "UploadMetaDataLambdaVersionLYB15SzdZZDOWBiiLf2CViUYwOUB4P90AJXxrqtb6xg"
      },
      "renameMetaData": {
        "handler": "renameMetaData/rename_metadata.rename_metadata",
        "package": {
          "include": [
            "renameMetaData/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\renameMetaData.zip"
        },
        "events": [],
        "name": "cloud-project-dev-renameMetaData",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "RenameMetaDataLambdaVersionRUPZXCiCOBkVyaP9HQxno0eMPrUZ8m0M0eaEQKVok38"
      },
      "updateMetaData": {
        "handler": "updateMetaData/update_metadata.update_metadata",
        "package": {
          "include": [
            "updateMetaData/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\updateMetaData.zip"
        },
        "events": [
          {
            "http": {
              "path": "update-metadata",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-updateMetaData",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "UpdateMetaDataLambdaVersionmunxH91ZpSor72D1OnWIg5mlfpMBDGJBmms794qLM"
      },
      "uploadFile": {
        "handler": "fileUpload/upload_file.upload_file",
        "package": {
          "include": [
            "fileUpload/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\uploadFile.zip"
        },
        "events": [],
        "name": "cloud-project-dev-uploadFile",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "UploadFileLambdaVersionaMHP9NJj4nWUgDFsYJg3SgNIUMcbVij2d8tWxKUA"
      },
      "uploadFolder": {
        "handler": "uploadFolder/upload_folder.upload_folder",
        "package": {
          "include": [
            "uploadFolder/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\uploadFolder.zip"
        },
        "events": [
          {
            "http": {
              "path": "upload-folder",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-uploadFolder",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "UploadFolderLambdaVersionBcQlB0q2tHyLexYPYMmFgqHn1gaj07A31b2FB5B7O4U"
      },
      "renameFolder": {
        "handler": "renameFolder/rename_folder.rename_folder",
        "package": {
          "include": [
            "renameFolder/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\renameFolder.zip"
        },
        "events": [
          {
            "http": {
              "path": "rename-folder",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-renameFolder",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "RenameFolderLambdaVersionMythAOrCAoen2XFPnFqh3UUWZovgx8j8oVvLOxsrg"
      },
      "moveFile": {
        "handler": "moveFile/move_file.move_file",
        "package": {
          "include": [
            "moveFile/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\moveFile.zip"
        },
        "events": [],
        "name": "cloud-project-dev-moveFile",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "MoveFileLambdaVersionYhHB9pz72BEHOOX87vebaqqP6souihpRweJZE9xHpc"
      },
      "removeFile": {
        "handler": "removeFile/remove_file.remove_file",
        "package": {
          "include": [
            "removeFile/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\removeFile.zip"
        },
        "events": [
          {
            "http": {
              "path": "remove-file",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-removeFile",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "RemoveFileLambdaVersionGyKvIugs1t9vb8m70JYLSF9UkM2ObZlFDGu9sKbgHCo"
      },
      "removeFolder": {
        "handler": "removeFolder/remove_folder.remove_folder",
        "package": {
          "include": [
            "removeFolder/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\removeFolder.zip"
        },
        "events": [
          {
            "http": {
              "path": "remove-folder",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-removeFolder",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "RemoveFolderLambdaVersionuIq0jLQa6kg0JQYfYuBDYEEXncvCphtllMZdbaTcS4"
      },
      "getSharedFiles": {
        "handler": "getSharedFiles/get_shared_files.get_shared_files",
        "package": {
          "include": [
            "getSharedFiles/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\getSharedFiles.zip"
        },
        "events": [
          {
            "http": {
              "path": "get-shared-files",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-getSharedFiles",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "GetSharedFilesLambdaVersionCDCp1KXu1ZhwDbeL7YXAC0RonNOBjIqG9OsqcXgfM"
      },
      "removePermission": {
        "handler": "removeViewPermission/remove_view_permission.remove_permission",
        "package": {
          "include": [
            "removeViewPermission/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\removePermission.zip"
        },
        "events": [
          {
            "http": {
              "path": "file-permission",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-removePermission",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "RemovePermissionLambdaVersion0gRpcHbbOeZy6LJsRSFhLQfQGF8m7cP3FoEQxQ"
      },
      "getPermission": {
        "handler": "getViewPermission/get_view_permission.get_permissions",
        "package": {
          "include": [
            "getViewPermission/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\getPermission.zip"
        },
        "events": [
          {
            "http": {
              "path": "file-permission",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-getPermission",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "GetPermissionLambdaVersionjw65peDEJg9yNB8aklaokreUZs1Hhpsz2uxcTTAzQ"
      },
      "saveRequest": {
        "handler": "saveRegistrationRequest/save_registration_request.save_request",
        "package": {
          "include": [
            "saveRegistrationRequest/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\saveRequest.zip"
        },
        "events": [
          {
            "http": {
              "path": "save/registration-request",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-saveRequest",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "SaveRequestLambdaVersion33DglyIvvk8kCrmfCqLmN6vxGB1owx5eC5smGjn6s"
      },
      "removeRequest": {
        "handler": "removeRegistrationRequest/remove_registration_request.remove_request",
        "package": {
          "include": [
            "removeRegistrationRequest/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\removeRequest.zip"
        },
        "events": [
          {
            "http": {
              "path": "registration-request",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-removeRequest",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "RemoveRequestLambdaVersionCxG1F0dkblQaccMlVMGTtWaAoFgis92DmWtfbLJ10M"
      },
      "getRequest": {
        "handler": "getRegistrationRequests/get_registration_requests.get_requests",
        "package": {
          "include": [
            "getRegistrationRequests/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\getRequest.zip"
        },
        "events": [
          {
            "http": {
              "path": "registration-request",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-getRequest",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "GetRequestLambdaVersionXfdNmYigB4gh7iMqOdPSsXaXmREMIr5tgcI4qgoFDo"
      },
      "sendInvite": {
        "handler": "sendInvite/send_invite.send_invite",
        "package": {
          "include": [
            "sendInvite/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\sendInvite.zip"
        },
        "events": [
          {
            "http": {
              "path": "send-invite",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-sendInvite",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "SendInviteLambdaVersionEUDaF0Hs4fGgNkfxD2Hh23rnamKRXyc6aJJZbLzdOI8"
      },
      "acceptRequest": {
        "handler": "acceptRegistrationRequest/accept_registration_request.accept_request",
        "package": {
          "include": [
            "acceptRegistrationRequest/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\acceptRequest.zip"
        },
        "events": [
          {
            "http": {
              "path": "accept-registration-request",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-acceptRequest",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "AcceptRequestLambdaVersionB2eQ5cLymwDMF2v5swNyWMz1uY2A2GQlAbb7W3UWGI"
      },
      "getEmail": {
        "handler": "getEmail/get_email.get_email",
        "package": {
          "include": [
            "getEmail/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\getEmail.zip"
        },
        "events": [
          {
            "http": {
              "path": "get-email",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "COGNITO_USER_POOLS",
                "managedExternally": false,
                "authorizerId": {
                  "Ref": "MyApiGatewayAuthorizer"
                },
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "cloud-project-dev-getEmail",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "GetEmailLambdaVersionht736qOOzrXKTh70HJXMt6wjp8nGl58gra5NPUSo"
      },
      "testiramoStep": {
        "handler": "testiramoStep/testiramo_step.testiramo_step",
        "package": {
          "include": [
            "testiramoStep/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\testiramoStep.zip"
        },
        "events": [],
        "name": "cloud-project-dev-testiramoStep",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "TestiramoStepLambdaVersiontAZD6eFNWrs3M1TMWlqq0CYXyucosAV4thkcp2ZCPA"
      },
      "testiramoStep2": {
        "handler": "testiramoStep2/testiramo_step2.testiramo_step2",
        "package": {
          "include": [
            "testiramoStep2/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\testiramoStep2.zip"
        },
        "events": [],
        "name": "cloud-project-dev-testiramoStep2",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "TestiramoStep2LambdaVersionv2qR8xunmF8gKFlm57mvxgC5VsSWayzlIIYgmD3No8"
      },
      "undoUpload": {
        "handler": "undoUpload/undo_upload.undo_upload",
        "package": {
          "include": [
            "undoUpload/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\undoUpload.zip"
        },
        "events": [],
        "name": "cloud-project-dev-undoUpload",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "UndoUploadLambdaVersionpK0YdCPJ0213vTJWEMe2mnFdqIAqUQS9XmkxKfAKgg"
      },
      "undoMoving": {
        "handler": "undoMoving/undo_moving.undo_moving",
        "package": {
          "include": [
            "undoMoving/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\undoMoving.zip"
        },
        "events": [],
        "name": "cloud-project-dev-undoMoving",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "UndoMovingLambdaVersionYlMm9OPwVTmQNoQWT2fUf1GVtBZseyjUSjbzwKsc6I"
      },
      "sendToSqs": {
        "handler": "sendToSqs/send_to_sqs.send_to_sqs",
        "package": {
          "include": [
            "sendToSqs/**"
          ],
          "artifact": "C:\\fakultet\\TrecaGodina\\Racunarstvo u oblaku\\Projekatv2\\Cloud_Tim14\\Cloud\\.serverless\\sendToSqs.zip"
        },
        "events": [],
        "name": "cloud-project-dev-sendToSqs",
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.7",
        "vpc": {},
        "versionLogicalId": "SendToSqsLambdaVersionoFabzPulsI5qJMAOuXAp4KZekTClxRKOTvjLh4wJ0RA"
      }
    },
    "resources": {
      "Resources": {
        "notificationQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "notificationQueue",
            "VisibilityTimeout": 300,
            "DelaySeconds": 0,
            "MaximumMessageSize": 262144,
            "ReceiveMessageWaitTimeSeconds": 20
          }
        },
        "userTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "userTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "email",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "email",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "registrationRequestTable2": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "registrationRequestTable2",
            "AttributeDefinitions": [
              {
                "AttributeName": "inviter_email",
                "AttributeType": "S"
              },
              {
                "AttributeName": "invited_user_email",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "inviter_email",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "invited_user_email",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "FilePermissionsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "file-permissions",
            "AttributeDefinitions": [
              {
                "AttributeName": "granted_user",
                "AttributeType": "S"
              },
              {
                "AttributeName": "file_path",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "granted_user",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "file_path",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "DynamoDbMetaData": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "meta-data",
            "AttributeDefinitions": [
              {
                "AttributeName": "emailAndName",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "emailAndName",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "S3BucketForFiles": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "tim7-project-files-bucket",
            "AccessControl": "Private",
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedMethods": [
                    "GET",
                    "PUT",
                    "POST",
                    "DELETE"
                  ],
                  "AllowedOrigins": [
                    "*"
                  ]
                }
              ]
            }
          }
        },
        "MyUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "my-user-poll",
            "UsernameAttributes": [
              "email"
            ],
            "AutoVerifiedAttributes": [
              "email"
            ],
            "MfaConfiguration": "OFF",
            "AccountRecoverySetting": {
              "RecoveryMechanisms": [
                {
                  "Name": "verified_email",
                  "Priority": 1
                }
              ]
            },
            "UserPoolTags": {
              "TagKey": "TagValue"
            }
          }
        },
        "MyUserPoolClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "UserPoolId": {
              "Ref": "MyUserPool"
            },
            "ClientName": "my-user-poll",
            "GenerateSecret": false
          }
        },
        "MyApiGatewayAuthorizer": {
          "Type": "AWS::ApiGateway::Authorizer",
          "Properties": {
            "AuthorizerResultTtlInSeconds": 10,
            "IdentitySource": "method.request.header.Authorization",
            "Name": "MyCognitoAuthorizer",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "Type": "COGNITO_USER_POOLS",
            "ProviderARNs": [
              {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:cognito-idp:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":userpool/",
                    {
                      "Ref": "MyUserPool"
                    }
                  ]
                ]
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "cloud-project",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "individually": true,
        "patterns": [
          "!**/**",
          "utility/**"
        ],
        "artifactsS3KeyDirname": "serverless/cloud-project/dev/code-artifacts",
        "artifactDirectoryName": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "stepFunctions": {
        "stateMachines": {
          "fileUploadStateMachine": {
            "events": [
              {
                "http": {
                  "path": "upload-file",
                  "method": "post",
                  "cors": {
                    "origins": [
                      "*"
                    ],
                    "origin": "*",
                    "methods": [
                      "OPTIONS",
                      "POST"
                    ],
                    "headers": [
                      "Content-Type",
                      "X-Amz-Date",
                      "Authorization",
                      "X-Api-Key",
                      "X-Amz-Security-Token",
                      "X-Amz-User-Agent"
                    ],
                    "allowCredentials": false
                  },
                  "authorizer": {
                    "type": "COGNITO_USER_POOLS",
                    "authorizerId": {
                      "Ref": "MyApiGatewayAuthorizer"
                    },
                    "resultTtlInSeconds": 300,
                    "identitySource": "method.request.header.Authorization",
                    "claims": []
                  }
                }
              }
            ],
            "definition": {
              "StartAt": "uploadFile",
              "States": {
                "uploadFile": {
                  "Type": "Task",
                  "Resource": "${ae1b6bf551bb08e6d73b5e6ccd81a809}",
                  "Next": "uploadMetaData"
                },
                "uploadMetaData": {
                  "Type": "Task",
                  "Resource": "${af2f906013cf1145a224d614f405b05c}",
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "undoUpload"
                    }
                  ],
                  "Next": "sendToSqs"
                },
                "sendToSqs": {
                  "Type": "Task",
                  "Resource": "${61c4c3d2f891cef4bbf3f25f77ce9b8c}",
                  "End": true
                },
                "undoUpload": {
                  "Type": "Task",
                  "Resource": "${4008ef9cbce5d188f278903292f2eec3}",
                  "ResultPath": "$.undoUploadResult",
                  "End": true
                }
              }
            }
          },
          "fileRenameStateMachine": {
            "events": [
              {
                "http": {
                  "path": "move-file",
                  "method": "put",
                  "cors": {
                    "origins": [
                      "*"
                    ],
                    "origin": "*",
                    "methods": [
                      "OPTIONS",
                      "PUT"
                    ],
                    "headers": [
                      "Content-Type",
                      "X-Amz-Date",
                      "Authorization",
                      "X-Api-Key",
                      "X-Amz-Security-Token",
                      "X-Amz-User-Agent"
                    ],
                    "allowCredentials": false
                  },
                  "authorizer": {
                    "type": "COGNITO_USER_POOLS",
                    "authorizerId": {
                      "Ref": "MyApiGatewayAuthorizer"
                    },
                    "resultTtlInSeconds": 300,
                    "identitySource": "method.request.header.Authorization",
                    "claims": []
                  }
                }
              }
            ],
            "definition": {
              "StartAt": "moveFile",
              "States": {
                "moveFile": {
                  "Type": "Task",
                  "Resource": "${022021a1f7f0614def4ed900cd1bed50}",
                  "Next": "renameMetaData"
                },
                "renameMetaData": {
                  "Type": "Task",
                  "Resource": "${7d4e542f016f8a0f2e1c27a73335d3c2}",
                  "Catch": [
                    {
                      "ErrorEquals": [
                        "States.ALL"
                      ],
                      "Next": "undoMoving"
                    }
                  ],
                  "Next": "sendToSqs"
                },
                "sendToSqs": {
                  "Type": "Task",
                  "Resource": "${61c4c3d2f891cef4bbf3f25f77ce9b8c}",
                  "End": true
                },
                "undoMoving": {
                  "Type": "Task",
                  "Resource": "${163b4bf67870202fa552e0211f1d5bdb}",
                  "ResultPath": "$.undoUploadResult",
                  "OutputPath": "$.Payload",
                  "End": true
                }
              }
            }
          },
          "testnaStateMasina": {
            "events": [
              {
                "http": {
                  "path": "step-test",
                  "method": "post",
                  "cors": {
                    "origins": [
                      "*"
                    ],
                    "origin": "*",
                    "methods": [
                      "OPTIONS",
                      "POST"
                    ],
                    "headers": [
                      "Content-Type",
                      "X-Amz-Date",
                      "Authorization",
                      "X-Api-Key",
                      "X-Amz-Security-Token",
                      "X-Amz-User-Agent"
                    ],
                    "allowCredentials": false
                  },
                  "authorizer": {
                    "type": "COGNITO_USER_POOLS",
                    "authorizerId": {
                      "Ref": "MyApiGatewayAuthorizer"
                    },
                    "resultTtlInSeconds": 300,
                    "identitySource": "method.request.header.Authorization",
                    "claims": []
                  }
                }
              }
            ],
            "definition": {
              "StartAt": "uploadFile",
              "States": {
                "uploadFile": {
                  "Type": "Task",
                  "Resource": "${ae1b6bf551bb08e6d73b5e6ccd81a809}",
                  "Next": "uploadMetaData"
                },
                "uploadMetaData": {
                  "Type": "Task",
                  "Resource": "${af2f906013cf1145a224d614f405b05c}",
                  "End": true
                }
              }
            }
          }
        }
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "stepFunctions": {
      "stateMachines": {
        "$ref": "$[\"service\"][\"initialServerlessConfig\"][\"stepFunctions\"][\"stateMachines\"]"
      },
      "activities": []
    }
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/cloud-project/dev/1687796541864-2023-06-26T16:22:21.864Z",
    "artifact": ""
  }
}